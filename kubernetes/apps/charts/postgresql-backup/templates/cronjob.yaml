---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgresql-backup
  namespace: {{ .Release.Namespace }}
  labels:
    name: database-backup
spec:
  schedule: {{ .Values.cronjob.schedule }}
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 86400 # one day
  jobTemplate:
    spec:
      activeDeadlineSeconds: 7200 # two hours
      template:
        spec:
          restartPolicy: Never
          volumes:
            {{- range .Values.secretMounts }}
            - name: {{ .name }}
              secret:
                secretName: {{ .name }}
            {{- end }}
          containers:
            - name: client
              image: {{ .Values.cronjob.image }}
              {{- if .Values.config.envFrom }}
              envFrom:
                {{- toYaml .Values.config.envFrom | nindent 16 }}
              {{- end }}
              {{- if .Values.config.env }}
              env:
                {{- toYaml .Values.config.env | nindent 16 }}
                {{- if .Values.config.envAppend }}
                  {{- toYaml .Values.config.envAppend | nindent 16 }}
                {{- end }}
              {{- end }}
              volumeMounts:
              {{- range .Values.secretMounts }}
              - {{ toJson . }}
              {{- end }}
              command: ['/bin/bash', '-c']
              args:
                - |

                {{ if .Values.healthchecks.uuid }}
                  wget --no-check-certificate -q -O - {{ .Values.healthchecks.host }}/ping/{{ .Values.healthchecks.uuid }}/start || echo "Failed to ping start"
                {{ end }}

                  # snapshot current database
                  echo "Snapshotting Database"
                  pg_dumpall --clean \
                    | gzip --rsyncable \
                    | restic backup \
                      --host {{ .Release.Namespace }}:{{ .Release.Name }} \
                      --stdin \
                      --stdin-filename pg_dumpall.sql.gz

                  sql_snapshot_status=$?

                  # prune aged snapshots
                  echo "Pruning aged snapshots"
                  restic forget \
                    --host {{ .Release.Namespace }}:{{ .Release.Name }} \
                    --keep-last 36 \
                    --keep-daily 7 \
                    --keep-weekly 52

                  prune_status=$?

                {{ if .Values.healthchecks.uuid }}
                  backup_status=0

                  if [ $sql_snapshot_status -ne 0 ]; then
                    echo "Reporting failure: SQL snapshot"
                    backup_status=1
                  elif [ $prune_status -ne 0 ]; then
                    echo "Reporting failure: Prune"
                    backup_status=2
                  fi


                  wget --no-check-certificate -q -O - {{ .Values.healthchecks.host }}/ping/{{ .Values.healthchecks.uuid }}/${backup_status} || echo "Failed to ping job end"
                {{ end }}
