# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
#
# Feel free to modify this file to suit your needs.
---
version: '3.8'
x-airflow-common:
  &airflow-common
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/gcs/dags
    AIRFLOW__CORE__BASE_LOG_FOLDER: /opt/airflow/gcs/logs
    AIRFLOW__CORE__PLUGINS_FOLDER: /opt/airflow/gcs/plugins
    AIRFLOW__WEBSERVER__RELOAD_ON_PLUGIN_CHANGE: 'true'

    # this option prevents a DAG from trying to run all dagruns back to its
    # start date. this lets you it spin up docker, unpause a dag, and just
    # get the latest run. Or pause a DAG for a long time, and not have it
    # try to run on a million dates when unpaused.
    AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT: 'false'

    CALITP_BQ_MAX_BYTES: 10000000000
    CALITP_SLACK_URL: ${CALITP_SLACK_URL}

    CALITP_AMPLITUDE_BENEFITS_API_KEY: ${CALITP_AMPLITUDE_BENEFITS_API_KEY}
    CALITP_AMPLITUDE_BENEFITS_SECRET_KEY: ${CALITP_AMPLITUDE_BENEFITS_SECRET_KEY}

    # connections - required to allow local testing of pod operators
    # see https://stackoverflow.com/a/55064944/1144523
    AIRFLOW_CONN_GOOGLE_CLOUD_DEFAULT: "google-cloud-platform://:@:?extra__google_cloud_platform__project=cal-itp-data-infra"

    # bucket for holding results of extraction tasks
    AIRFLOW_VAR_EXTRACT_BUCKET: "gs://gtfs-data-test"
    # Corresponds to GCP_PROJECT on composer, but gauth looks for this name.
    # see https://googleapis.dev/python/google-auth/latest/user-guide.html#using-external-identities
    GOOGLE_CLOUD_PROJECT: cal-itp-data-infra

    CALITP_BUCKET__AGGREGATOR_SCRAPER: "gs://test-calitp-aggregator-scraper"
    CALITP_BUCKET__AIRTABLE: "gs://test-calitp-airtable"
    CALITP_BUCKET__DBT_ARTIFACTS: "gs://test-calitp-dbt-artifacts"
    CALITP_BUCKET__GTFS_DOWNLOAD_CONFIG: "gs://test-calitp-gtfs-download-config"
    CALITP_BUCKET__GTFS_RT_RAW: "gs://test-calitp-gtfs-rt-raw-v2"
    CALITP_BUCKET__GTFS_RT_PARSED: "gs://test-calitp-gtfs-rt-parsed"
    CALITP_BUCKET__GTFS_RT_VALIDATION: "gs://test-calitp-gtfs-rt-validation"
    CALITP_BUCKET__GTFS_SCHEDULE_RAW: "gs://test-calitp-gtfs-schedule-raw-v2"
    CALITP_BUCKET__GTFS_SCHEDULE_VALIDATION: "gs://test-calitp-gtfs-schedule-validation"
    CALITP_BUCKET__GTFS_SCHEDULE_UNZIPPED: "gs://test-calitp-gtfs-schedule-unzipped"
    CALITP_BUCKET__GTFS_SCHEDULE_PARSED: "gs://test-calitp-gtfs-schedule-parsed"
    CALITP_BUCKET__PUBLISH: "gs://test-calitp-publish"

    DBT_TARGET: staging_service_account

    # TODO: this can be removed once we've confirmed it's no longer in Airtable
    GRAAS_SERVER_URL: $GRAAS_SERVER_URL

    # Composer variables for kubernetes
    POD_CLUSTER_NAME: "us-west2-calitp-airflow2-pr-171e4e47-gke"
    POD_LOCATION: "us-west2-a"
    AIRFLOW_ENV: "development"
    CALITP_USER: "pipeline"
    SENTRY_DSN: "https://e498431022154366b0ff8b71cf2d93e0@sentry.k8s.calitp.jarv.us/2"
    SENTRY_ENVIRONMENT: "development"

  volumes:
    # Note that in cloud composer, folders like dags are not in AIRFLOW_HOME
    # but nested in a folder named gcs
    - ./dags:/opt/airflow/gcs/dags
    - ./logs:/opt/airflow/gcs/logs
    - ./plugins:/opt/airflow/gcs/plugins
    - ./data:/opt/airflow/gcs/data
    - $HOME/.config/gcloud:/home/airflow/.config/gcloud # Windows users: replace $HOME/.config with ${APPDATA}
      #- $HOME/.kube:/home/airflow/.kube
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    ports:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow:
    <<: *airflow-common
    command: airflow

volumes:
  postgres-db-volume:
