#!/bin/bash
set -e

branch_name=$(git symbolic-ref --short HEAD)
work_tree=$(git rev-parse --show-toplevel)

# find release channel for current branch
while read param val; do
  if [[ $val = $branch_name ]]; then
    RELEASE_CHANNEL=$(cut -d. -f2 <<< "$param")
    break
  fi
done <<< $(git config --get-regexp '^channel\..*\.branch$' || true)

# deploy to channel
if [[ $RELEASE_CHANNEL ]]; then

  # load environment files
  for envfile in $(git config --get-all "channel.${RELEASE_CHANNEL}.envfile" || printf ''); do

    envfile_path=$work_tree/$envfile
    if ! [[ -e $envfile_path ]]; then
      printf 'error: %s envfile not found: %s\n' "$RELEASE_CHANNEL" "$envfile_path" >&2
      exit 1
    fi

    while read line; do
      if [[ $line =~ ^([[:alnum:]_]+)=(.*)$ ]] && ! [[ $(declare -p "${BASH_REMATCH[1]}" 2>/dev/null) ]]; then
        declare -x "$line"
      else
        continue
      fi
    done < "$envfile_path"

  done

  if ! [[ $KUBECONFIG ]]; then
    printf 'post-merge: error releasing into %s: missing required variable: KUBECONFIG\n' "$RELEASE_CHANNEL" >&2
    exit 1
  fi

  # prevent workflows from interpreting arguments
  set --

  # release workflows
  printf 'post-merge: releasing into channel %s\n' "$RELEASE_CHANNEL"
  source $work_tree/ci/steps/validate-clean-worktree.sh
  source $work_tree/ci/workflows/service-release.sh

fi
