version: 2

sources:
  - name: external_littlepay
    description: Hive-partitioned external tables reading Littlepay payments data.
    database: "{{ env_var('DBT_SOURCE_DATABASE', var('SOURCE_DATABASE')) }}"
    schema: external_littlepay
    tables:
      - name: authorisations
      - name: customer_funding_source
      - name: device_transaction_purchases
      - name: device_transactions
      - name: micropayment_adjustments
      - name: micropayment_device_transactions
      - name: micropayments
      - name: product_data
      - name: refunds
      - name: settlements

models:
  - name: int_device_transaction_pairs_common_fields
    columns:
      - name: participant_id
      - name: micropayment_id
        description: '{{ doc("micropayment_adjustments_micropayment_id") }}'
      - name: littlepay_transaction_id_1
        description: Unique tap ID generated for the "on" transaction by Littlepay upon receipt of a tap to the Device API.
      - name: littlepay_transaction_id_2
        description: Unique tap ID generated for the "off" transaction by Littlepay upon receipt of a tap to the Device API.
      - name: customer_id_1
        description: Unique identifier representing the customer that belongs to the "on" transaction's customer funding source.
      - name: customer_id_2
        description: Unique identifier representing the customer that belongs to the "off" transaction's customer funding source.
      - name: device_id_1
        description: The unique identifier of the device that was tapped for the "on" transaction.
      - name: device_id_2
        description: The unique identifier of the device that was tapped for the "off" transaction.
      - name: device_id_issuer_1
        description: The entity that issued the device ID for the "on" transaction.
      - name: device_id_issuer_2
        description: The entity that issued the device ID for the "off" transaction.
      - name: route_id_1
        description: The route identifier provided by the device for the "on" transaction.
      - name: route_id_2
        description: The route identifier provided by the device for the "off" transaction.
      - name: mode_1
        description: |
          The mode of transport for the "on transaction.

          Possible values are `bus` and `train`.
      - name: mode_2
        description: |
          The mode of transport for the "off" transaction.

          Possible values are `bus` and `train`.
      - name: direction_1
      - name: direction_2
      - name: vehicle_id_1
        description: An identifier for the vehicle the "on" transaction took place on. This ID is unique to the participant.
      - name: vehicle_id_2
        description: An identifier for the vehicle the "off" transaction took place on. This ID is unique to the participant.
      - name: has_mismatched_customer_id
      - name: has_mismatched_device_id
      - name: has_mismatched_device_id_issuer
      - name: has_mismatched_route_id
      - name: has_mismatched_mode
      - name: has_mismatched_direction
      - name: has_mismatched_vehicle_id

  - name: int_littlepay__cleaned_micropayment_device_transactions
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - micropayment_id
            - littlepay_transaction_id

  - name: int_littlepay__customer_funding_source_vaults
    description: |
      Derived from customer_funding_source records.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: calitp_valid_at
          upper_bound_column: calitp_invalid_at
          partition_by: funding_source_vault_id
          gaps: not_allowed
          zero_length_range_allowed: true
    columns:
      - name: funding_source_id
        tests:
          - not_null
          - unique
      - name: customer_id
        description: '{{ doc("customer_funding_source_customer_id") }}'
      - name: funding_source_vault_id
        description: Identifies the funding source (for example, card) that the micropayment will be charged to. This is always the card that was tapped. A registered customer can have multiple funding sources linked to them.
      - name: principal_customer_id
        description: '{{ doc("customer_funding_source_principal_customer_id") }}'
      - name: bin
        description: First six numbers of the PAN.
      - name: masked_pan
        description: First six and last four numbers of the PAN.
      - name: card_scheme
        description: Card scheme of this funding source. One of (`VISA`, `MASTERCARD`).
      - name: issuer
        description: Name of the card issuer.
      - name: issuer_country
        description: Country that the card issuer belongs to.
      - name: form_factor
        description: Form factor describing the contactless EMV device of the funding source.

  - name: int_littlepay__customers
    description: |
      Derived from customer_funding_source records.
      This table most importantly serves as a mapping from each customer_id to a
      principal or canonical customer_id. Each customer_id with the same
      principal_customer_id should be assumed to be the same person. A customer_id
      should only have one principal_customer_id.
    columns:
      - name: customer_id
        description: '{{ doc("customer_funding_source_customer_id") }}'
        tests:
          - unique
      - name: principal_customer_id
        description: '{{ doc("customer_funding_source_principal_customer_id") }}'
        tests:
          - not_null
      - name: earliest_tap

  - name: int_littlepay__device_transaction_types
    columns:
      - name: littlepay_transaction_id
        description: '{{ doc("device_transactions_littlepay_transaction_id") }}'
        tests:
          - not_null
          - unique_proportion:
              at_least: 0.999
      - name: transaction_type
      - name: pending

  - name: stg_littlepay__authorisations
    columns:
      - name: participant_id
        description: Identifies the participant that the authorisation belongs to.
      - name: aggregation_id
        description: The aggregation that is being authorised. A single aggregation can have multiple authorisations. The authorisations that are submitted depend on the scheme and the result of the initial authorisation (if declined, debt recovery authorisations may be performed).
      - name: acquirer_id
        description: The institution that acquired the transaction
      - name: request_type
        description: One of (`Card_Check`, `Authorisation`, `Debt Recovery`)
      - name: transaction_amount
        description: The amount to authorise
      - name: currency_code
        description: The ISO 4217 numeric currency code for the amount to authorise
      - name: retrieval_reference_number
      - name: littlepay_reference_number
      - name: external_reference_number
      - name: response_code
        description: Response code - varies based on acquirer and scheme. Generally `00` if successful.
      - name: status
        description: Status of authorisation. One of (`Authorised`, `Declined`, `Failed`, `Invalid`, `Lost`, `Stolen`, `Unavailable`, `Unknown`, `Verified`)
      - name: authorisation_date_time_utc
      - &lp_export_date
        name: littlepay_export_date
        description: |
          Date of the source file from Littlepay. Date is extracted from filenames, which generally have the
          structure {timestamp}_{data_type}.{file extension}.
      - &lp_export_ts
        name: littlepay_export_ts
        description: |
          Timestamp of the source file from Littlepay. Timestamp is extracted from filenames, which generally have the
          structure {timestamp}_{data_type}.{file extension}.
      - &lp_line_number
        name: _line_number
        description: |
          Line number of this row in the source file.
          Some line numbers may be missing because we drop extra copies of rows that are full duplicates of another row.
      - &payments_input_row_key
        name: _key
        description: |
          Synthetic key composed of Littlepay file date and line number to uniquely identify a row within source data.
        tests:
          - not_null
          - unique
      - name: _payments_key
        description: |
          Synthentic key composed of the elements that define a natural key within the source data (primary key according to Littlepay schema.)
        tests:
          - not_null
          - unique_proportion:
              at_least: 0.999

  - name: stg_littlepay__customer_funding_source
    tests:
      - &littlepay_uniqueness
        dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - instance
            - extract_filename
            - ts
            - _line_number
    columns:
      - name: littlepay_export_ts
        description: Export timestamp parsed from filename.
        tests:
          - not_null
      - name: masked_pan
        description: First six and last four numbers of the PAN.
      - name: issuer_country
        description: Country that the card issuer belongs to.
      - name: issuer
        description: Name of the card issuer.
      - name: funding_source_id
        description: Unique identifier representing the funding source; a guid internal to Littlepay.
      - name: customer_id
        description: '{{ doc("customer_funding_source_customer_id") }}'
      - name: card_scheme
        description: Card scheme of this funding source. One of (`VISA`, `MASTERCARD`).
      - name: bin
        description: First six numbers of the PAN.
      - name: funding_source_vault_id
        description: Identifies the funding source (for example, card) that the micropayment will be charged to. This is always the card that was tapped. A registered customer can have multiple funding sources linked to them.
      - name: form_factor
        description: Form factor describing the contactless EMV device of the funding source.
      - name: principal_customer_id
        description: '{{ doc("customer_funding_source_principal_customer_id") }}'
      - name: participant_id
        description: The participant ID that uniquely identifies each participant.
      - name: calitp_funding_source_id_ranking_size
        description: The number of records on which the `funding_source_id` shows up in the table
      - name: calitp_funding_source_id_rank
        description: A ranking of the records using the `funding_source_id`, ordered newest to oldest
      - name: calitp_funding_source_vault_id_ranking_size
        description: The number of records on which the `funding_source_vault_id` shows up in the table
      - name: calitp_funding_source_vault_id_rank
        description: A ranking of the records using the `funding_source_vault_id`, ordered newest to oldest
      - name: calitp_customer_id_ranking_size
        description: The number of records on which the `customer_id` shows up in the table
      - name: calitp_customer_id_rank
        description: A ranking of the records using the `customer_id`, ordered newest to oldest

  - name: stg_littlepay__device_transaction_purchases
    tests:
      - *littlepay_uniqueness
    columns:
      - name: littlepay_transaction_id
        description: Unique tap ID generated by Littlepay upon receipt of a tap to the Device API.
      - name: purchase_id
        description: Unique identifier for the purchase. For example, a ticket ID assigned by the device.
      - name: correlated_purchase_id
        description: The purchase_id for the tap on when this is a variable fare tap off.
      - name: product_id
        description: |
          The product ID configured in the Merchant Portal. Possible values are `retail` or `flat fare`.

          When the `product_id` is represented with `retail`, transactions for one or more tickets are purchased by a single tap and when an autoscan transaction
          is performed this will be represented by a flat fare or variable fare.

          Autoscan is a 'tap and go' transaction where a cardholder taps their card on a device without any pre-interaction with driver or point-of-sale devices that
          are connected to the device
      - name: description
        description: Description of the type of fare purchase, if defined from the Merchant Portal.
      - name: indicative_amount
        description: The value of the purchase. The value may be adjusted by capping rules or tap-off.
      - name: transaction_time
        description: The time transaction was created.

  - name: stg_littlepay__device_transactions
    tests:
      - *littlepay_uniqueness
    description: In the case of duplicated littlepay_transaction_id values, the one with the latest transaction_date_time_utc in the latest export file takes precedence.
    columns:
      - name: customer_id
        description: The unique identifier of the customer that performed the transaction.
      - name: device_id
        description: The unique identifier of the device that was tapped.
      - name: device_id_issuer
        description: The entity that issued the device ID.
      - name: device_transaction_id
        description: The unique identifier for the transaction allocated by the device.
      - name: granted_zone_ids
        description: ""
      - name: latitude
        description: |
          The latitude of the vehicle, in decimal degrees, where the device transaction took place.

          If the device does not support GPS, then this field will not be included.
      - name: littlepay_transaction_id
        description: '{{ doc("device_transactions_littlepay_transaction_id") }}'
        tests:
          - not_null
          - unique
      - name: location_id
        description: The identifier of the location where the transaction occurred.
      - name: location_name
        description: The title of the location where the transaction occurred.
      - name: location_scheme
        description: The scheme used for the location identifier.
      - name: longitude
        description: |
          The longitude of the vehicle, in decimal degrees, where the device transaction took place.

          If the device does not support GPS, then this field will not be included.
      - name: mode
        description: |
          The mode of transport.

          Possible values are `bus` and `train`.
      - name: onward_zone_ids
        description: ""
      - name: participant_id
        description: The unique identifier of the participant that the device belongs to.
      - name: route_id
        description: The route identifier provided by the device.
      - name: transaction_date_time_utc
        description: The date and time that the customer tapped on the device.
      - name: transaction_deny_reason
        description: |
          The reason a transaction was denied.

          Possible values:
          * `EMV online requested`
          * `EMV decline`
          * `Card on deny list`
          * `Card not on pilot list`
      - name: transaction_outcome
        description: |
          The outcome of the transaction as determined by the device, taking into account all inputs, such as the EMV reader outcome and card lists.

          Possible values are `allow` or `deny`. A value of `allow` means the customer was allowed to travel, whereas a value of `deny` means the customer was denied travel.
      - name: type
        description: |
          The type of transaction. The value depends on whether the device is configured for flat or variable fares.

          Possible values:
          * `single`
          * `on`
          * `off`

          For flat fares, only a tap of type `single` is submitted when the customer starts their trip. For variable fares, a tap of type `on` is submitted when the customer starts their trip, and a tap of type `off` is typically submitted when the customer ends their trip. For customers using Back Office API, taps are always considered `single`.
      - name: vehicle_id
        description: An identifier for the vehicle the transaction took place on. This ID is unique to the participant.
      - name: zone_id
        description: The zone identifier provided by the device.
      - name: transaction_date_time_pacific
        description: The date and time that the customer tapped on the device (in Pacific time instead of UTC).

  - name: stg_littlepay__micropayment_adjustments
    tests:
      - *littlepay_uniqueness
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - micropayment_id
            - adjustment_id
            - participant_id
            - customer_id
            - product_id
            - type
            - description
            - amount
            - time_period_type
            - applied
            - zone_ids_us
    columns:
      - name: adjustment_id
        description: '{{ doc("micropayment_adjustments_adjustment_id") }}'
      - name: micropayment_id
        description: '{{ doc("micropayment_adjustments_micropayment_id") }}'
        tests:
          - unique:
              where: applied
      - name: participant_id
        description: Identifies the participant that the adjustment belongs to.
      - name: customer_id
        description: Identifies the customer that the adjustment belongs to.
      - name: product_id
        description: Identifies the product that was used to adjust the micropayment.
      - name: type
        description: |
          The type of product / rule that created the adjustment. Additional values may be added over time.

          Possible values:
          * `MULTI_DAY_CAP`
          * `DAILY_CAP`
          * `WEEKLY_CAP`
      - name: description
        description: General description of the reason the adjustment was created.
      - name: amount
        description: The amount deducted from the `nominal_amount` to arrive at the `charge_amount` for the micropayment being adjusted.
      - name: time_period_type
        description: |
          Indicates whether the travel was determined to have occurred during a peak or off-peak period for the purposes of capping.

          Possible values are `PEAK` and `OFFPEAK`.
      - name: applied
        description: If `TRUE`, then the adjustment to the micropayment has been applied.
      - name: incentive_product_id
        description: |
          The ID of the product with the incentive that was applied to micropayments.

          Same ID as `product_id`.

  - name: stg_littlepay__micropayment_device_transactions
    tests:
      - *littlepay_uniqueness
    columns:
      - name: littlepay_transaction_id
        description: |
          Transaction identifier assigned by Littlepay.

          For 'tap on, tap off' integrations, merchants will see two transactions for each micropayment.
      - name: micropayment_id
        description: The micropayment that the transaction is associated with.

  - name: stg_littlepay__micropayments
    tests:
      - *littlepay_uniqueness
    description: This model makes the assumption that, in the case of duplicated micropayment_id values, the one with the latest transaction_time in the latest export file takes precedence.
    columns:
      - name: micropayment_id
        description: '{{ doc("micropayments_micropayment_id") }}'
        tests:
          - not_null
          - unique
      - name: aggregation_id
        description: Identifies the aggregation that the micropayment belongs to.
      - name: participant_id
        description: Identifies the participant that the micropayment belongs to.
      - name: customer_id
        description: Identifies the customer that the micropayment belongs to.
      - name: funding_source_vault_id
        description: |
          Identifies the funding source (for example, card) that the micropayment will be charged to. This is always the card that was tapped.

          A registered customer can have multiple funding sources linked to it. This field can be used to join to the `customer_funding_source` feed.
      - name: transaction_time
        description: |
          The date and time when the micropayment was created.

          For variable fare (tap on/tap off), the micropayment will not be created until the tap off occurs.

          The date reflects the processing time by Littlepay, rather than the event time; that is, when the related taps occurred.
      - name: payment_liability
        description: |
          Indicates who would be liable to absorb the cost if the micropayment was declined by the issuer when an authorisation is attempted.

          Possible values are `ISSUER` or `OPERATOR`.
      - name: charge_amount
        description: The amount that will be credited to or debited from the funding source. This may be lower than the nominal amount if adjustments have been applied. nominal_amount Decimal The amount that would be charged if no adjustments were to be applied.
      - name: currency_code
        description: ISO 4217 numeric code representing the currency that the `charge_amount` and `nominal_amount` are denominated in.
      - name: type
        description: |
          Indicates the type of fare that the micropayment charge represents.

          Transaction type. Possible values are `CREDIT` or `DEBIT`. The value Will be `DEBIT` if `charge_amount >= 0.00`
      - name: charge_type
        description: |
          Possible values:
          * `RETAIL_FARE`
          * `FLAT_FARE`
          * `COMPLETE_VARIABLE_FARE`
          * `INCOMPLETE_VARIABLE_FARE`
          * `REFUND`

  - name: stg_littlepay__product_data
    tests:
      - *littlepay_uniqueness
    columns:
      - name: participant_id
        description: Identifies the participant that the micropayment belongs to.
      - name: product_id
        description: '{{ doc("product_data_product_id") }}'
        tests:
          - not_null
          - unique
      - name: previous_version_id
        description: Refers to the previous version ID of the product
      - name: original_version_id
        description: |
          Refers to the original version ID of the product.

          The `original_version_id` may differs from the `previous_version_id` if the product has been updated more than once.
      - name: product_code
        description: The code specified in the Merchant Portal against the product.
      - name: product_description
        description: The description specified in the Merchant Portal during the product creation.
      - name: product_type
        description: |
          The name of the product type.

          Possible values:
          * `CAPPING`
          * `DISCOUNT`
          * `PURCHASE`
      - name: activation_type
        description: The type of customers the product will be actioned for.
      - name: product_status
        description: |
          The status of the product as set in the Merchant Portal.

          Possible values:
          * `ACTIVE`
          * `INACTIVE`
          * `EXPIRED`
      - name: superseded
        description: If `true`, indicates that the product version is obsolete as a new version of the product is in use.
      - name: created_date
        description: The date the product was created in the Merchant Portal.
      - name: capping_type
        description: |
          Type of capping assigned to the product.

          Possible values:
          * `Daily Capping`
          * `Weekly Capping`
          * `Multi Day Capping`
          * `Time Based Capping`
      - name: multi_operator
        description: If `TRUE`, indicates that the product falls under a multi-operator scheme.
      - name: rules_default_limit
        description: Maximum capping limit for the product.
      - name: rules_max_fare_value
        description: Maximum fare value used. Anything exceeding this value is not included in capping.
      - name: rules_transaction_types
        description: |
          This list the type of transaction that can be applied to this product.

          Possible values:
          * `Autoscan`
          * `Variable`
          * `Flat`
      - name: capping_start_time
        description: Indicates capping start time. This is used when the capping product has a specific start time.
      - name: capping_end_time
        description: Indicates capping end time. This is used when the capping product has a specific end time.
      - name: all_day
        description: If set to `1`, indicates that the capping product is in effect for the entire day.
      - name: weekly_cap_start_day
        description: |
          Indicates the start day of the product's weekly cap.

          Possible values are `SUNDAY` or `MONDAY`.
      - name: weekly_cap_end_day
        description: |
          Indicates the end day of the product's weekly cap.

          Possible values are `SATURDAY` or `SUNDAY`.
      - name: number_of_days_in_cap_window
        description: This is the number of days in the capping window set against the product.
      - name: capping_duration
        description: The duration of time after the customer initially taps where future taps are not charged.
      - name: number_of_transfer
        description: The number of free transfers after the initial tap.
      - name: capping_time_zone
        description: The time zone where the capping product was used.
      - name: capping_overlap
        description: The time a customer can overlap within a 24-hour period.
      - name: capping_application_level
        description: This is the customer level tapping as customers can have multiple cards (physical / digital).
      - name: scheduled_start_date_time
        description: Expected Blank
      - name: scheduled_end_date_time
        description: Expected Blank
      - name: route_capping_enabled
        description: If `true`, route capping is enabled.
      - name: routes
        description: List of routes that apply to the product.
      - name: zoned_capping_enabled
        description: If `true`, zoned capping is enabled.
      - name: zoned_capping_mode
        description: |
          Defines how the zones are mapped relative to one another.

          Possible values:
          * `Concentric` — Zones start from an inner zone and expand outwards with each new zone.
          * `Nonconcentric` — Zones are next to each other and do not overlap.
      - name: zoned_capping_pricing_type
        description: |
          Defines which pricing period applies to the product.

          Possible values are `PEAK` or `OFFPEAK`.
      - name: on_peak_zones
        description: JSON object that defines the rules for the peak zones.
      - name: off_peak_zones
        description: JSON object that defines the rules for the off-peak zones
      - name: incentive_enabled
        description: If `true`, an incentive is enabled on the product.
      - name: incentive_type
        description: |
          The type of the incentive associated to the product.

          Possible values are `DAILY_CAP` or `CUMULATIVE_CAP`.
      - name: discount_qualifier
        description: |
          The type of qualifier that gives eligibility to the product.

          Possible values are `CAP_REACHED` or `SINGLE_TRIP`.
      - name: configuration
        description: |
          Configuration type for the incentive.
          Possible values are `DAILY_TABLE` or `ZONE_TRIANGLE`.

  - name: stg_littlepay__refunds
    tests:
      - *littlepay_uniqueness
    columns:
      - name: refund_id
        description: The unique identifier for each requested refund.
      - name: aggregation_id
        description: |
          The aggregation that is being authorised.

          A single aggregation can have multiple authorisations. The
          authorisations that are submitted depend on the scheme and the result
          of the initial authorisation. For example, if an authorisation is declined,
          then a debt recovery authorisation may be performed.
      - name: participant_id
        description: Identifies the participant that the micropayment belongs to.
      - name: customer_id
        description: Identifies the customer that the micropayment belongs to.
      - name: micropayment_id
        description: Uniquely identifies the micropayment.
      - name: settlement_id
        description: The unique identifier for each settlement requested to the acquirer.
      - name: refund_amount
        description: The actual amount refunded to the customer.
      - name: currency_code
        description: ISO 4217 numeric currency code for the amount that was requested to be settled.
      - name: initiator
        description: The user who initiated the refund request.
      - name: reason
        description: The reason given for requesting the refund.
      - name: approval_status
        description: |
          The status of the approval request.

          If the refund was initiated by the merchant, then the request is automatically approved.

          Possible values are `Approved` or `Pending Approval`.
      - name: settlement_status
        description: |
          The status of the refund.

          Possible values are `Sent for Settlement` or `Settled`.
      - name: retrieval_reference_number
        description: |
          Uniquely identifies a card transaction, based on the ISO 8583 standard. The value is generated during authorisation.

          If the acquirer is Elavon, this value will be split between `littlepay_reference_number` and `external_reference_number`.
      - name: littlepay_reference_number
        description: |
          Uniquely identifies a card transaction.

          If the acquirer is Elavon, then this key will contain the first part of the string from `retrieval_reference_number`.
      - name: external_reference_number
        description: |
          Uniquely identifies a card transaction.

          If the acquirer is Elavon, then this key will contain the second part of the string from `retrieval_reference_number`.
      - name: transaction_date
        description: Settlement transaction date (if micropayment was settled before refund)
      - name: transaction_amount
        description: The amount of the original fare.
      - name: proposed_amount
        description: The amount equalling `transaction_amount - refund_amount`.
      - name: issuer
        description: The user that approved the refund.
      - name: issuer_comment
        description: This field is not in use.
      - name: created_time
        description: The time the request was created.
      - name: approved_time
        description: The time the approval was processed.
      - name: status
        description: |
          The status of the refund.

          Possible values are `SENT_FOR_SETTLEMENT` or `SETTLED`.
      - name: settlement_status_time
        description: The time the refund was settled.
      - name: settlement_reason_code
        description: This field is not in use.
      - name: settlement_response_text
        description: This field is not in use.

  - name: stg_littlepay__settlements
    tests:
      - *littlepay_uniqueness
    columns:
      - name: settlement_id
        description: A unique identifier for each settlement.
      - name: participant_id
        description: The unique identifier of the participant that the device belongs to.
      - name: aggregation_id
        description: Identifies the aggregation that the micropayment belongs to.
      - name: customer_id
        description: Identifies the customer that the micropayment belongs to.
      - name: funding_source_id
        description: |
          Identifies the funding source (for example, card) that the micropayment will be charged to. This is always the card that was tapped.

          A registered customer can have multiple funding sources linked to it. This field can be used to join to the `customer_funding_source` feed.
      - name: settlement_type
        description: |
          Type of settlement that occurred. Possible values are `DEBIT` or `CREDIT`.

          If refunding a micropayment that has already been settled, the value will be `CREDIT`.
      - name: transaction_amount
        description: The settlement amount.
      - name: currency_code
        description: ISO 4217 numeric currency code for the amount that was requested to be settled.
      - name: retrieval_reference_number
        description: |
          Uniquely identifies a card transaction, based on the ISO 8583 standard.

          If the acquirer is Elavon, this value will be split between `littlepay_reference_number` and `external_reference_number`.
      - name: littlepay_reference_number
        description: |
          Uniquely identifies a card transaction.

          If the acquirer is Elavon, then this key will contain the first part of the string from `retrieval_reference_number`.
      - name: external_reference_number
        description: |
          Uniquely identifies a card transaction.

          If the acquirer is Elavon, then this key will contain the second part of the string from `retrieval_reference_number`.
      - name: settlement_requested_date_time_utc
        description: Timestamp of when the settlement request was submitted to the acquirer.
      - name: acquirer
        description: Identifies the acquirer used to settle the transaction.
