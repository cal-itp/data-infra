WITH source AS (
    SELECT * FROM {{ source('external_littlepay', 'customer_funding_source') }}
),

clean_columns AS (
    SELECT
        {{ trim_make_empty_string_null('funding_source_id') }} AS funding_source_id,
        {{ trim_make_empty_string_null('funding_source_vault_id') }} AS funding_source_vault_id,
        {{ trim_make_empty_string_null('customer_id') }} AS customer_id,
        {{ trim_make_empty_string_null('bin') }} AS bin,
        {{ trim_make_empty_string_null('masked_pan') }} AS masked_pan,
        {{ trim_make_empty_string_null('card_scheme') }} AS card_scheme,
        {{ trim_make_empty_string_null('issuer') }} AS issuer,
        {{ trim_make_empty_string_null('issuer_country') }} AS issuer_country,
        {{ trim_make_empty_string_null('form_factor') }} AS form_factor,
        {{ trim_make_empty_string_null('principal_customer_id') }} AS principal_customer_id,
        CAST(_line_number AS INTEGER) AS _line_number,
        `instance`,
        extract_filename,
        ts,
        {{ extract_littlepay_filename_ts() }} AS littlepay_export_ts,
        {{ extract_littlepay_filename_date() }} AS littlepay_export_date,
        -- hash all content not generated by us to enable deduping full dup rows
        -- hashing at this step will preserve distinction between nulls and empty strings in case that is meaningful upstream
        {{ dbt_utils.generate_surrogate_key(['funding_source_id', 'funding_source_vault_id',
            'customer_id', 'bin', 'masked_pan', 'card_scheme', 'issuer', 'issuer_country',
            'form_factor']) }} AS _content_hash,
    FROM source
),

add_keys_drop_full_dupes AS (
    SELECT
        *,
        -- flag in reverse order, since we usually want the latest
        DENSE_RANK() OVER (
            PARTITION BY funding_source_id
            ORDER BY littlepay_export_ts DESC) AS calitp_funding_source_id_rank,
        DENSE_RANK() OVER (
            PARTITION BY funding_source_vault_id
            ORDER BY littlepay_export_ts DESC) AS calitp_funding_source_vault_id_rank,
        DENSE_RANK() OVER (
            PARTITION BY customer_id
            ORDER BY littlepay_export_ts DESC) AS calitp_customer_id_rank,
        -- generate keys now that input columns have been trimmed & cast and files deduped
        {{ dbt_utils.generate_surrogate_key(['littlepay_export_ts', '_line_number', 'instance']) }} AS _key,
        {{ dbt_utils.generate_surrogate_key(['funding_source_id', 'customer_id']) }} AS _payments_key,
    FROM clean_columns
    {{ qualify_dedupe_full_duplicate_lp_rows() }}
),

stg_littlepay__customer_funding_source AS (
    SELECT
        funding_source_id,
        funding_source_vault_id,
        customer_id,
        bin,
        masked_pan,
        card_scheme,
        issuer,
        issuer_country,
        form_factor,
        principal_customer_id,
        _line_number,
        `instance`,
        extract_filename,
        ts,
        littlepay_export_ts,
        littlepay_export_date,
        calitp_funding_source_id_rank,
        calitp_funding_source_vault_id_rank,
        calitp_customer_id_rank,
        _key,
        _payments_key,
        _content_hash,
    FROM add_keys_drop_full_dupes
    -- Some funding sources have incomplete information when first present in data, like missing
    -- values for form_factor or issuer_country that are filled in during later exports.
    -- Additionally, sometimes a filled column value is updated in newer exports for a given entry.
    QUALIFY ROW_NUMBER() OVER (
        PARTITION BY
            funding_source_id,
            customer_id
        ORDER BY littlepay_export_ts DESC
    ) = 1
)

SELECT * FROM stg_littlepay__customer_funding_source
