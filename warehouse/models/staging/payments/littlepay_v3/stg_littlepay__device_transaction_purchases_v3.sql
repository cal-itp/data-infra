WITH source AS (
    SELECT * FROM {{ source('external_littlepay_v3', 'device_transaction_purchases') }}
),

clean_columns AS (
    SELECT
        {{ trim_make_empty_string_null('littlepay_transaction_id') }} AS littlepay_transaction_id,
        {{ trim_make_empty_string_null('purchase_id') }} AS purchase_id,
        {{ trim_make_empty_string_null('correlated_purchase_id') }} AS correlated_purchase_id,
        {{ trim_make_empty_string_null('product_id') }} AS product_id,
        {{ trim_make_empty_string_null('description') }} AS description,
        {{ safe_cast('indicative_amount', type_numeric()) }} AS indicative_amount,

        -- renamed transaction_timestamp_utc in v3, this was transaction_time in v1
        {{ safe_cast('transaction_timestamp_utc', type_timestamp()) }} AS transaction_time,

        CAST(_line_number AS INTEGER) AS _line_number,
        `instance`,
        extract_filename,
        {{ extract_littlepay_filename_ts() }} AS littlepay_export_ts,
        {{ extract_littlepay_filename_date() }} AS littlepay_export_date,

        -- these are new fields in v3, excluding for now to faciliate union with feed v1
        -- record_updated_timestamp_utc,
        -- participant_id,
        -- channel,

        ts,
        -- hash all content not generated by us to enable deduping full dup rows
        -- hashing at this step will preserve distinction between nulls and empty strings in case that is meaningful upstream
        {{ dbt_utils.generate_surrogate_key(['littlepay_transaction_id', 'purchase_id',
            'correlated_purchase_id', 'product_id', 'description', 'indicative_amount',
            'transaction_timestamp_utc']) }} AS _content_hash,
    FROM source
),

add_keys_drop_full_dupes AS (
    SELECT
        *,
        -- generate keys now that input columns have been trimmed & cast and files deduped
        {{ dbt_utils.generate_surrogate_key(['littlepay_export_ts', '_line_number', 'instance']) }} AS _key,
        {{ dbt_utils.generate_surrogate_key(['littlepay_transaction_id', 'purchase_id']) }} AS _payments_key,
    FROM clean_columns
    {{ qualify_dedupe_full_duplicate_lp_rows() }}
),

stg_littlepay__device_transaction_purchases_v3 AS (
    SELECT
        littlepay_transaction_id,
        purchase_id,
        correlated_purchase_id,
        product_id,
        description,
        indicative_amount,
        transaction_time,
        _line_number,
        `instance`,
        extract_filename,
        littlepay_export_ts,
        littlepay_export_date,

        -- these are new fields in v3, excluding for now to faciliate union with feed v1
        -- record_updated_timestamp_utc,
        -- participant_id,
        -- channel,

        ts,
        _key,
        _payments_key,
        _content_hash,
    FROM add_keys_drop_full_dupes
    -- Some purchases initially are given a value of 'autoscan' for product_id, and then that
    -- value is later updated. No other partial duplicate conditions exist at implementation time.
    QUALIFY ROW_NUMBER() OVER (
        PARTITION BY
            littlepay_transaction_id,
            purchase_id
        ORDER BY littlepay_export_ts DESC
    ) = 1
)

SELECT * FROM stg_littlepay__device_transaction_purchases_v3
