WITH source AS (
    SELECT * FROM {{ source('external_enghouse', 'transactions') }}
),

clean_columns AS (
    SELECT
-- reintroduce trim_make_empty_string_null/safe_cast for fields below
        id,
        operation,
        terminal_id,
        mapping_terminal_id,
        mapping_merchant_id,
        timestamp,
        amount,
        payment_reference,
        spdh_response,
        response_type,
        response_message,
        token,
        issuer_response,
        core_response,
        rrn,
        authorization_code,
        par,
        brand,

-- reintroduce handling of content generated by us below
        CAST(_line_number AS INTEGER) AS _line_number,
        `instance`,
        extract_filename,
        -- revisit the use of this littlepay-specific macro
        {{ extract_littlepay_filename_ts() }} AS enghouse_export_ts,
        {{ extract_littlepay_filename_date() }} AS enghouse_export_date,
        ts,
        -- hash all content not generated by us to enable deduping full dup rows
        -- hashing at this step will preserve distinction between nulls and empty strings in case that is meaningful upstream
        -- {{ dbt_utils.generate_surrogate_key(['','', '', '']) }} AS _content_hash,
    FROM source
),

-- revisit deduplication logic below

-- add_keys_drop_full_dupes AS (
--     SELECT
--         *,
--         -- generate keys now that input columns have been trimmed & cast
--         {{ dbt_utils.generate_surrogate_key(['littlepay_export_ts', '_line_number', 'instance']) }} AS _key,
--         {{ dbt_utils.generate_surrogate_key(['aggregation_id', 'authorisation_date_time_utc']) }} AS _payments_key,
--     FROM clean_columns
--     {{ qualify_dedupe_full_duplicate_lp_rows() }}
-- ),

-- -- we have some authorisations where the same aggregation has multiple rows with the same timestamp
-- -- these seem like clear duplicates, and some of them one of the two copies is missing status and RRN; these can be dropped
-- -- the rest need to be handled downstream by checking against settlements data
-- same_timestamp_simple_dupes AS (
--     SELECT
--         _payments_key,
--         (COUNT(DISTINCT retrieval_reference_number) = 1 AND COUNT(*) > 1) AS drop_candidate,
--     FROM add_keys_drop_full_dupes
--     GROUP BY 1
-- ),

stg_enghouse__transactions AS (
    SELECT
        id,
        operation,
        terminal_id,
        mapping_terminal_id,
        mapping_merchant_id,
        timestamp,
        amount,
        payment_reference,
        spdh_response,
        response_type,
        response_message,
        token,
        issuer_response,
        core_response,
        rrn,
        authorization_code,
        par,
        brand,

         _line_number,
        `instance`,
        extract_filename,
        enghouse_export_ts,
        enghouse_export_date,
        ts,
        -- _key,
        -- _payments_key,
        -- _content_hash,
    FROM clean_columns
    -- FROM add_keys_drop_full_dupes
    -- LEFT JOIN same_timestamp_simple_dupes
    -- USING(_payments_key)
    -- -- rows to drop are those where RRN is null and it's a duplicate
    -- WHERE NOT drop_candidate OR retrieval_reference_number IS NOT NULL
)

SELECT * FROM stg_enghouse__transactions
