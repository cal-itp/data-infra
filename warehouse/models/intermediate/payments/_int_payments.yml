version: 2

models:
  - name: int_payments__authorisations_deduped
    description: |
      This model deduplicates authorisations rows with duplicate `_payments_key` values that require additional handling
      beyond what is covered in the staging model, essentially rows that require a join for deduplication.
      Columns have the same meanings as in the upstream staging model.
      The most important test for this model is on the upstream staging model: to ensure that no
      `_payments_key` values are fully dropped betweeen that model and this one (i.e., to ensure
      that all rows dropped do in fact have a duplicate and no authorisations are lost.)
    columns:
      - name: request_type
        tests:
          - accepted_values:
              values: ['AUTHORISATION', 'DEBT_RECOVERY_AUTHCHECK', 'DEBT_RECOVERY_REVERSAL', 'CARD_CHECK']
      - name: aggregation_id
        tests:
          - relationships:
              to: ref('int_payments__latest_authorisations_by_aggregation')
              field: aggregation_id
              config:
                # there is a single update from 2021 where there's only one update with a null status
                # we're comfortable letting this row get dropped
                where: "_key != '60e1a87f2cafe52c08589cb13fb39707'"
  - name: int_payments__latest_authorisations_by_aggregation
    description: |
      This model contains only the most recent authorisations data per `aggregation_id`.
      Many aggregations pass through a few different authorisations (for example, perhaps a card check
      before getting authorised, or multiple debt recovery attempts.) This model keeps only the most
      recent row according to `authorisation_date_time_utc`.
    columns:
      - &aggregation_pk
        name: aggregation_id
        description: |
          ID of the aggregation being summarized. An aggregation can contain or be associated with multiple
          micropayment, authorisation, and settlement events. It represents the unit at which settlement occurs
          (so multiple settlement events only occur for a single aggregation if there are refunds against the original settlement.)
        tests:
          - not_null
          - unique
      - name: currency_code
        tests:
          - accepted_values:
              values: [840]
              quote: false
      - name: final_authorisation_has_null_status
        descrpition: |
          A boolean flag that identifies aggregations for which the chosen "latest" authorisation
          is older than a more recent record with a null status
  - name: int_payments__settlements_to_aggregations
    description: |
      This model contains Littlepay settlements aggregated to the `aggregation_id + retrieval_reference_number` level.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - aggregation_id
            - retrieval_reference_number
      - dbt_utils.expression_is_true:
          expression: "debit_amount + credit_amount = net_settled_amount_dollars"
      - dbt_utils.expression_is_true:
          expression: "contains_refund = (credit_amount < 0)"
    columns:
      - *aggregation_pk
      - name: retrieval_reference_number
        tests:
          - not_null
          - unique
      - &participant_id
        name: participant_id
        description: '{{ doc("lp_participant_id") }}'
      - name: contains_imputed_type
        description: '{{ doc("lp_settlement_contains_imputed_type") }}'
      - name: contains_refund
        description: '{{ doc("lp_settlement_contains_refund") }}'
      - name: latest_update_timestamp
        description: '{{ doc("lp_settlement_latest_update_timestamp") }}'
      - name: net_settled_amount_dollars
        description: '{{ doc("lp_net_settled_amount_dollars") }}'
        tests:
          - dbt_utils.accepted_range:
              min_value: 0
              inclusive: true
      - name: debit_amount
        description: '{{ doc("lp_settlement_debit_amount") }}'
      - name: credit_amount
        description: '{{ doc("lp_settlement_credit_amount") }}'
      - name: aggregation_is_settled
        description: '{{ doc("lp_aggregation_is_settled") }}'
      - name: debit_is_settled
        description: '{{ doc("lp_debit_is_settled") }}'
      - name: credit_is_settled
        description: '{{ doc("lp_credit_is_settled") }}'
  - name: int_payments__micropayments_to_aggregations
    description: |
      Littlepay micropayments grouped to the aggregation (`aggregation_id`) level.
    tests:
      - dbt_utils.expression_is_true:
          expression: "total_nominal_amount_dollars >= net_micropayment_amount_dollars"
    columns:
      - *participant_id
      - *aggregation_pk
      - name: net_micropayment_amount_dollars
        description: '{{ doc("lp_net_micropayment_amount_dollars") }}'
      - name: total_nominal_amount_dollars
        description: '{{ doc("lp_total_nominal_amount_dollars") }}'
      - name: latest_transaction_time
        description: '{{ doc("lp_mp_latest_transaction_time") }}'
      - name: num_micropayments
        description: '{{ doc("lp_num_micropayments") }}'
      - name: contains_pre_settlement_refund
        description: '{{ doc("lp_contains_pre_settlement_refund") }}'
      - name: contains_variable_fare
        description: '{{ doc("lp_contains_variable_fare") }}'
      - name: contains_flat_fare
        description: '{{ doc("lp_contains_flat_fare") }}'
      - name: contains_pending_charge
        description: '{{ doc("lp_contains_pending_charge") }}'
      - name: contains_adjusted_micropayment
        description: '{{ doc("lp_contains_adjusted_micropayment") }}'
  - name: int_payments__refunds_deduped
    description: |
      This model is a union of refunds found both in `stg_littlepay__refunds` and `stg_littlepay__micropayments`.
      It includes deduplication of refunds that appear multiple times with multiple statuses, to only take the most recent status,
      and also deduplicates based on `coalesced_id` which is `retrieval_reference_number` or `aggregation_id` if `retrieval_reference_number` is `NULL`.

      Columns have the same meanings as in the upstream staging model.

      The most important test for this model is on the upstream staging model: to ensure that no
      `retrieval_reference_number` or `aggregation_id` values are fully dropped betweeen that model and this one (i.e., to ensure
      that all rows dropped do in fact have a duplicate and no refunds are lost.)
    columns:
      - name: refund_id
        description: The unique identifier for each requested refund.
      - name: aggregation_id
        description: |
          The aggregation that contains the refund.

          A single aggregation can have multiple refunds.
      - name: micropayment_id
        description: |
          Uniquely identifies the micropayment being refunded.
          For some agencies, this mapping fails due to upstream data issues and `aggregation_id` must be used as a fallback.
      - *participant_id
      - name: customer_id
        description: Identifies the customer that the micropayment belongs to.
      - name: refund_amount
        description: The amount of the transaction remaining after the refund has been applied (transaction_amount - proposed_amount.)
      - name: transaction_date
        description: Settlement transaction date (if micropayment was settled before refund)
      - name: settlement_id
        description: The unique identifier for each settlement requested to the acquirer.
      - name: retrieval_reference_number
        description: |
          Uniquely identifies a card transaction, based on the ISO 8583 standard. The value is generated during authorisation.

          If the acquirer is Elavon, this value will be split between `littlepay_reference_number` and `external_reference_number`.
      - name: coalesced_id
        description: |
          Unique identifier consisting of `retrieval_reference_number` or `aggregation_id` if `retrieval_reference_number` is `NULL`.
      - name: transaction_amount
        description: The amount of the original fare.
      - name: proposed_amount
        description: The amount to be refunded to the customer.
      - name: status
        description: |
          The status of the refund.

          Possible values are `SENT_FOR_SETTLEMENT` or `SETTLED`.
      - name: initiator
        description: The user who initiated the refund request.
      - name: reason
        description: The reason given for requesting the refund.
      - name: approval_status
        description: |
          The status of the approval request.

          If the refund was initiated by the merchant, then the request is automatically approved.

          Possible values are `Approved` or `Pending Approval`.
      - name: issuer
        description: The user that approved the refund.
      - name: issuer_comment
        description: This field is not in use.
      - name: created_time
        description: The time the request was created.
      - name: approved_time
        description: The time the approval was processed.
      - name: settlement_status
        description: |
          The status of the refund.

          Possible values are `Sent for Settlement` or `Settled`.
      - name: settlement_status_time
        description: The time the refund was settled.
      - name: settlement_reason_code
        description: This field is not in use.
      - name: settlement_response_text
        description: This field is not in use.
      - &lp_line_number
        name: _line_number
        description: |
          Line number of this row in the source file.
          Some line numbers may be missing because we drop extra copies of rows that are full duplicates of another row.
      - name: currency_code
        description: ISO 4217 numeric currency code for the amount that was requested to be settled.
      - name: instance
      - name: extract_filename
      - name: ts
      - &lp_export_ts
        name: littlepay_export_ts
        description: |
          Timestamp of the source file from Littlepay. Timestamp is extracted from filenames, which generally have the
          structure {timestamp}_{data_type}.{file extension}.
      - &lp_export_date
        name: littlepay_export_date
        description: |
          Date of the source file from Littlepay. Date is extracted from filenames, which generally have the
          structure {timestamp}_{data_type}.{file extension}.
      - &_content_hash
        name: _content_hash
        description: |
          Hash of all data columns to uniquely identify row's content, mostly for debugging purposes.
          Should ideally be handled by uniqueness of _payments_key but surfaced for troubleshooting.
      - &payments_input_row_key
        name: _key
        description: |
          Synthetic key composed of Littlepay file date and line number to uniquely identify a row within source data.
      - name: _payments_key
        description: |
          Synthentic key composed of the elements that define a natural key within the source data (primary key according to Littlepay schema.)
      - name: source_table
        description: |
          The table the refund was initially present in (either `stg_littlepay__refunds` or `stg_littlepay__micropayments`)

  - name: int_payments__refunds_to_aggregations
    description: |
      This model provides a summary of `refund_amount` grouped by `aggregation_id` and `retrieval_reference_number`,
      as well as sums by `approval_status` (APPROVED, REFUSED, AWAITING, NULL)
    columns:
      - *participant_id
      - name: aggregation_id
        description: |
          The aggregation that contains the refund.

          A single aggregation can have multiple refunds.
      - name: retrieval_reference_number
        description: |
          Uniquely identifies a card transaction, based on the ISO 8583 standard. The value is generated during authorisation.

          If the acquirer is Elavon, this value will be split between `littlepay_reference_number` and `external_reference_number`.
      - name: total_refund_activity_amount_dollars
        description: The sum of refund_amount across all approval_statuses.
      - name: approved_amount
        description: The sum of refund_amount where approval_status is APPROVED.
      - name: refused_amount
        description: The sum of refund_amount where approval_status is REFUSED.
      - name: awaiting_amount
        description: The sum of refund_amount where approval_status is AWAITING.
      - name: null_approval_status_amount
        description: The sum of refund_amount where approval_status is NULL.

  - name: int_payments__micropayments_adjustments_refunds_joined
    description: |
      Summarizing micropayment information across the source micropayment,
      any applied adjustments (ex. fare capping), and any associated refunds.
    tests:
      - dbt_utils.expression_is_true:
          expression: "micropayment_refund_amount <= charge_amount"
    columns:
      - *participant_id
      - &micropayment_id
        name: micropayment_id
        description: '{{ doc("lp_micropayment_id") }}'
        tests:
          - not_null
          - unique
      - name: aggregation_id
        description: '{{ doc("lp_aggregation_id") }}'
      - name: funding_source_vault_id
        description: '{{ doc("lp_funding_source_vault_id") }}'
      - name: customer_id
        description: '{{ doc("lp_customer_id") }}'
      - name: charge_amount
        description: '{{ doc("lp_charge_amount") }}'
      - name: nominal_amount
        description: '{{ doc("lp_nominal_amount") }}'
      - name: charge_type
        description: '{{ doc("lp_charge_type") }}'
      - name: transaction_time
        description: '{{ doc("lp_transaction_time") }}'
      - name: adjustment_id
        description: '{{ doc("lp_adjustment_id") }}'
      - name: adjustment_type
        description: '{{ doc("lp_adj_type") }}'
      - name: adjustment_time_period_type
        description: '{{ doc("lp_adj_time_period_type") }}'
      - name: adjustment_description
        description: '{{ doc("lp_adj_description") }}'
      - name: adjustment_amount
        description: '{{ doc("lp_adj_amount") }}'
      - name: product_id
        description: '{{ doc("lp_product_id") }}'
      - name: product_code
        description: '{{ doc("lp_product_code") }}'
      - name: product_description
        description: '{{ doc("lp_product_description") }}'
      - name: product_type
        description: '{{ doc("lp_product_type") }}'
      - name: micropayment_refund_amount
        description: '{{ doc("lp_micropayment_refund_amount") }}'
      - name: aggregation_refund_amount
        description: '{{ doc("lp_aggregation_refund_amount") }}'
  - name: int_payments__matched_device_transactions
    description: |
      This model matches up pairs of device transactions that are associated with the same micropayment for variable
      fare agencies where riders have to tap on and off.
      For fixed-fare agencies (where riders do not have to tap off at the end of their journey) all
      fields associated with the "off" tap will be null.
    columns:
      - *participant_id
      - *micropayment_id
      - name: littlepay_transaction_id
        description: '{{ doc("lp_paired_first_transaction_id") }}'
        tests:
          - not_null
          # refunds cause duplicates; ignore them here
          - unique:
              config:
                where: micropayment_type != "CREDIT"
      - name: route_id
        description: '{{ doc("lp_paired_transaction_route_id") }}'
      - name: direction
        description: '{{ doc("lp_paired_first_direction") }}'
      - name: vehicle_id
        description: '{{ doc("lp_paired_first_vehicle_id") }}'
      - name: device_id
        description: '{{ doc("lp_paired_first_device_id") }}'
      - name: transaction_type
        description: '{{ doc("lp_paired_first_transaction_type") }}'
      - name: transaction_outcome
        description: '{{ doc("lp_paired_first_transaction_outcome") }}'
      - name: transaction_date_time_utc
        description: '{{ doc("lp_paired_first_transaction_date_time_utc") }}'
      - name: transaction_date_time_pacific
        description: '{{ doc("lp_paired_first_transaction_date_time_pacific") }}'
      - name: location_id
        description: '{{ doc("lp_paired_first_location_id") }}'
      - name: location_name
        description: '{{ doc("lp_paired_first_location_name") }}'
      - name: latitude
        description: '{{ doc("lp_paired_first_latitude") }}'
      - name: longitude
        description: '{{ doc("lp_paired_first_longitude") }}'
      - name: on_latitude
        description: '{{ doc("lp_paired_first_latitude") }}'
      - name: on_longitude
        description: '{{ doc("lp_paired_first_longitude") }}'
      - name: off_littlepay_transaction_id
        description: '{{ doc("lp_paired_second_transaction_id") }}'
      - name: off_device_id
        description: '{{ doc("lp_paired_second_device_id") }}'
      - name: off_transaction_type
        description: '{{ doc("lp_paired_second_transaction_type") }}'
      - name: off_transaction_outcome
        description: '{{ doc("lp_paired_second_transaction_outcome") }}'
      - name: off_transaction_date_time_utc
        description: '{{ doc("lp_paired_second_transaction_date_time_utc") }}'
      - name: off_transaction_date_time_pacific
        description: '{{ doc("lp_paired_second_transaction_date_time_pacific") }}'
      - name: off_location_id
        description: '{{ doc("lp_paired_second_location_id") }}'
      - name: off_location_name
        description: '{{ doc("lp_paired_second_location_name") }}'
      - name: off_latitude
        description: '{{ doc("lp_paired_second_latitude") }}'
      - name: off_longitude
        description: '{{ doc("lp_paired_second_longitude") }}'
      - name: earliest_tap
      - name: on_geography
        description: '{{ doc("lp_paired_first_geography") }}'
      - name: off_geography
        description: '{{ doc("lp_paired_second_geography") }}'
      - name: duration
        description: '{{ doc("lp_paired_duration") }}'
      - name: distance_meters
        description: '{{ doc("lp_paired_distance") }}'
      - name: transaction_date_pacific
        description: '{{ doc("lp_paired_first_transaction_date") }}'
      - name: day_of_week
        description: '{{ doc("lp_paired_first_day_of_week") }}'

  - name: int_payments__cleaned_micropayment_device_transactions
    description: |
      This model drops invalid `littlepay_transaction_id` values associated with
      erroneous micropayment records.
      It also annotates micropayment device transactions with the type and charge type
      of the associated micropayment to assist in later modeling.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - micropayment_id
            - littlepay_transaction_id
    columns:
      - name: micropayment_id
        description: '{{ doc("lp_micropayment_id") }}'
      - *participant_id
      - name: littlepay_transaction_id
        description: '{{ doc("lp_littlepay_transaction_id") }}'
        tests:
          - not_null
          - unique:
              config:
                where: micropayment_type != "CREDIT"
      - name: micropayment_charge_type
        description: '{{ doc("lp_charge_type") }}'
      - name: micropayment_type
        description: '{{ doc("lp_mp_type") }}'
  - name: int_payments__device_transaction_pairs_common_fields
    description: |
      This model contains matched pairs of device transactions (i.e., tap on/tap off pairs) with flags for cases where there are differing attributes
      between the two taps that may indicate a data quality or validity issue, for example when there is a different
      customer or vehicle ID between the two taps.
    columns:
      - *participant_id
      - name: micropayment_id
        description: '{{ doc("lp_micropayment_id") }}'
      - name: littlepay_transaction_id_1
        description: Unique tap ID generated for the "on" transaction by Littlepay upon receipt of a tap to the Device API.
      - name: littlepay_transaction_id_2
        description: Unique tap ID generated for the "off" transaction by Littlepay upon receipt of a tap to the Device API.
      - name: customer_id_1
        description: Unique identifier representing the customer that belongs to the "on" transaction's customer funding source.
      - name: customer_id_2
        description: Unique identifier representing the customer that belongs to the "off" transaction's customer funding source.
      - name: device_id_1
        description: The unique identifier of the device that was tapped for the "on" transaction.
      - name: device_id_2
        description: The unique identifier of the device that was tapped for the "off" transaction.
      - name: device_id_issuer_1
        description: The entity that issued the device ID for the "on" transaction.
      - name: device_id_issuer_2
        description: The entity that issued the device ID for the "off" transaction.
      - name: route_id_1
        description: The route identifier provided by the device for the "on" transaction.
      - name: route_id_2
        description: The route identifier provided by the device for the "off" transaction.
      - name: mode_1
        description: |
          The mode of transport for the "on transaction.

          Possible values are `bus` and `train`.
      - name: mode_2
        description: |
          The mode of transport for the "off" transaction.

          Possible values are `bus` and `train`.
      - name: direction_1
      - name: direction_2
      - name: vehicle_id_1
        description: An identifier for the vehicle the "on" transaction took place on. This ID is unique to the participant.
      - name: vehicle_id_2
        description: An identifier for the vehicle the "off" transaction took place on. This ID is unique to the participant.
      - name: has_mismatched_customer_id
      - name: has_mismatched_device_id_issuer
      - name: has_mismatched_route_id
      - name: has_mismatched_mode
      - name: has_mismatched_direction
      - name: has_mismatched_vehicle_id
  - name: int_payments__customer_funding_source_vaults
    description: |
      Derived from customer_funding_source records.
      funding_source_vault_id values can appear across multiple participants, so this
      table is unique at the funding_source_vault_id + participant_id level.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: calitp_valid_at
          upper_bound_column: calitp_invalid_at
          partition_by: funding_source_vault_id, participant_id
          gaps: not_allowed
          zero_length_range_allowed: true
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - participant_id
            - funding_source_id
    columns:
      - name: funding_source_id
        tests:
          - not_null
      - name: customer_id
        description: '{{ doc("customer_funding_source_customer_id") }}'
      - name: funding_source_vault_id
        description: Identifies the funding source (for example, card) that the micropayment will be charged to. This is always the card that was tapped. A registered customer can have multiple funding sources linked to them.
      - name: principal_customer_id
        description: '{{ doc("customer_funding_source_principal_customer_id") }}'
      - name: bin
        description: First six numbers of the PAN.
      - name: masked_pan
        description: First six and last four numbers of the PAN.
      - name: card_scheme
        description: Card scheme of this funding source. One of (`VISA`, `MASTERCARD`).
      - name: issuer
        description: Name of the card issuer.
      - name: issuer_country
        description: Country that the card issuer belongs to.
      - name: form_factor
        description: Form factor describing the contactless EMV device of the funding source.

  - name: int_payments__customers
    description: |
      Derived from customer_funding_source records.
      This table most importantly serves as a mapping from each customer_id to a
      principal or canonical customer_id. Each customer_id with the same
      principal_customer_id should be assumed to be the same person. A customer_id
      should only have one principal_customer_id.
      customer_id values can appear across multiple participants, so this
      table is unique at the customer_id + participant_id level.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - participant_id
            - customer_id
    columns:
      - name: customer_id
        description: '{{ doc("customer_funding_source_customer_id") }}'
        tests:
          - not_null
      - name: principal_customer_id
        description: '{{ doc("customer_funding_source_principal_customer_id") }}'
        tests:
          - not_null
      - name: earliest_tap
