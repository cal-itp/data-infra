version: 2

models:
  - name: dim_components
    description: '{{ doc("components_table") }}'
    columns:
      - &key
        name: key
        tests: &primary_key_tests
          - not_null
          - unique
        meta:
          metabase.semantic_type: type/PK
  - name: dim_contracts
    description: '{{ doc("contracts_table") }}'
    columns:
      - *key
      - name: contract_holder_organization_key
        tests:
          - relationships:
             to: ref('dim_organizations')
             field: key
      - name: contract_vendor_organization_key
        tests:
          - relationships:
             to: ref('dim_organizations')
             field: key
  - name: dim_data_schemas
    description: '{{ doc("data_schemas_table") }}'
    columns:
      - *key
  - name: dim_organizations
    description: '{{ doc("organizations_table") }}'
    columns:
      - *key
      - name: name
        description: Organization name
      - name: organization_type
        description: |
          Categorical data; example values "City/Town",
          "Joint Powers Agency"
      - name: roles
        description: |
          Array of categorical choices; example values
          "Regional Transportation Planning Agency,
          Metropolitan Planning Organization";
          "Metropolitan Planning Organization"
      - name: itp_id
        description: Cal-ITP ITP ID
        meta:
          metabase.semantic_type: type/FK
      - name: details
        description:	Text description related to the organization
      - name: reporting_category
        description: |
          Categories we want to hold ourselves accountable to:
          Core: funded by Caltrans/can control or influence somewhat
          Other Public Transit: (publicly available or managed) and publicly funded transit
          Other Transit: transit that isn't the above
      - name: ntp_id
        description: National Transit Database (NTD) ID
      - name: alias
      - name: gtfs_static_status
        description: |
          Computed value from source data: "Static OK" indicates that the number
          of associated (managed) `service` records is equal to the number of associated (managed) `service`
          records with static GTFS. Otherwise, status is "Static Incomplete".
      - name: gtfs_realtime_status
        description: |
          Computed value from source data: "RT OK" indicates that the number
          of associated (managed) `service` records is equal to the number of associated (managed) `service`
          records with realtime GTFS and at least one managed service has complete RT coverage (i.e.,
          all three RT feed types: vehicle positions, trip updates, and service alerts).
          Otherwise, status is "RT Incomplete".
  - name: dim_services
    description: '{{ doc("services_table") }}'
    columns:
      - *key
      - name: name
        description: Service name
      - name: service_type
        description: |
          Array of categorical choices; example
          values "ADA paratransit, on-demand"; "fixed-route"
      - name: mode
        description: |
          Array of categorical choices; example
          values "bus, car/van"; "ferry"
      - name: currently_operating
        description: |
          Boolean for whether service is currently active
      - name: gtfs_schedule_status
        description: |
          Options are: `needed`, `research`,  `ok`, `need long-term solution`,
          or `not public`.
          This field may also be empty (null).
          **Note: This field is manually entered in the Transit Database,
          so it may be subject to some gaps in coverage and it is not updated automatically.
          Data in this field may not align with data from the GTFS pipeline,
          for example in `views.gtfs_schedule_dim_feeds`.**
      - name: gtfs_schedule_quality
        description: |
          Status of overall GTFS quality for a given transit service. Options are:
          `0 - Does not have GTFS Schedule`;
          `1 - Has URL for GTFS downloading`;
          `2 - GTFS data has active service`;
          `3 - GTFS data has zero validation errors`;
          `4 - GTFS data has zero validation warnings`;
          `5 - GTFS data satisfies first tier of GTFS Guidelines`;
          `6 - GTFS data satisfies all GTFS Guidelines`.
          This field can also be empty (null). Sometimes this field is null (missing) even
          for services that **do** have GTFS schedule data.
          **Note: This field is manually entered in the Transit Database,
          so it may be subject to some gaps in coverage and it is not updated automatically.
          Data in this field may not align with validations data from the
          GTFS pipeline, for example in `views.validation_fact_daily_feed_notices`,
          or GTFS guidelines checks implemented in `mart_gtfs_guidelines.fact_daily_guideline_checks`.
          Use those tables directly for the most up-to-date information on individual GTFS feeds'
          validation and guideline statuses.**
  - name: dim_products
    description: '{{ doc("products_table") }}'
    columns:
      - *key
  - name: dim_properties_and_features
    columns:
      - *key
  - name: dim_contract_attachments
    description: |
      Attachment links to images of contracts.
      One contract can have multiple attachments.
    columns:
      - *key
      - name: contract_key
        tests:
          - relationships:
             to: ref('dim_contracts')
             field: key
  - name: dim_gtfs_datasets
    description: |
      Each record represents a gtfs dataset (feed) that is either a type of
      GTFS Schedule, Trip Updates, Vehicle Locations or Alerts.
      A gtfs dataset MAY:
      - be *disaggregated into* one or more `gtfs service data` records.
      - be *produced* by one or more `organizations`
      - be *published* by an `organizations`.
    columns:
      - *key
      - name: data
        description: |
          GTFS data type ("GTFS Schedule", "GTFS TripUpdates",
          "GTFS VehiclePositions", or "GTFS Alerts")
      - name: data_quality_pipeline
        description: |
          If "true", indicates that this dataset should be ingested by the
          Cal-ITP data pipeline. Nulls indicate dataset should not be ingested.
      - name: deprecated_date
        description: |
          If populated, indicates that dataset was deprecated on listed date
          and is no longer active.
      - name: aggregated_to_gtfs_dataset_key
        description: |
          Key for another GTFS dataset record to which this record is aggregated.
        # self relationship test breaks metabase connector: https://github.com/JarvusInnovations/dbt-metabase/blob/master/dbtmetabase/parsers/dbt_manifest.py#L202
        # TODO: make an aliased version of the relationship test
        # tests:
        #   - relationships:
        #      to: ref('dim_gtfs_datasets')
        #      field: key
      - name: schedule_to_use_for_rt_validation_gtfs_dataset_key
        description: |
          For realtime datasets, the key of the schedule dataset that should
          be used for validation (i.e., the given realtime dataset should reference
          identifiers from the schedule dataset listed here.)
        # self relationship test breaks metabase connector: https://github.com/JarvusInnovations/dbt-metabase/blob/master/dbtmetabase/parsers/dbt_manifest.py#L202
        # TODO: make an aliased version of the relationship test
        # tests:
        #   - relationships:
        #      to: ref('dim_gtfs_datasets')
        #      field: key
      - name: calitp_extracted_at
        description: |
          Date extracted from Airtable. This column will be deprecated as _valid_from
          and _valid_to are more fully adopted.
      - name: _valid_from
        description: |
          Starting timestamp (inclusive) from which this record is valid.
          Currently just a constant placeholder of '1901-01-01T00:00:00+00' until
          this table has historical data incorporated.
      - name: _valid_to
        description: |
          Ending timestamp (inclusive) through which this record is valid.
          Currently just a constant placeholder of '2099-01-01T00:00:00+00 minus one microsecond' until
          this table has historical data incorporated.
  - name: dim_gtfs_service_data
    description: |
      Each record links together a single `gtfs dataset` and one (if possible)
      or more `services`.  Additional fields define how to isolate the service
      within the `gtfs dataset` (see below).
      Many services have more than one GTFS dataset which describes their service. Often these
      are either precursors to *final* datasets (e.g. AC Transit's GTFS dataset is a
      precursor to the Bay Area 511 dataset) or artifacts produced in other processes such as
      creating GTFS Realtime

      To identify specific records within a given dataset that
      correspond to the listed service:
      * Selection levels are in following order: agency_id, network_id, route_id
      * BLANK indicates ALL records
      * Comma-separated list for values that should be selected at that selection level
      * "*" indicates remaining records after other selections at that selection level

      For further details, see: https://docs.calitp.org/data-infra/datasets_and_tables/transitdatabase.html?highlight=network_id#gtfs-service-data-notation-for-isolating-gtfs-services-within-gtfs-datasets
    columns:
      - *key
      - name: service_key
        description: |
          Service record key for this service / dataset relationship.
        tests:
          - relationships:
             to: ref('dim_services')
             field: key
      - name: gtfs_dataset_key
        description: |
          GTFS dataset record key for this service / dataset relationship.
        tests:
          - relationships:
             to: ref('dim_gtfs_datasets')
             field: key
      - name: category
        description: |
          "Primary" (indicating that this is the canonical dataset for this service) or
          "precursor" (this dataset is an input to some other primary
          canonical dataset for this service). Null or "unknown" indicate unknown.
      - name: agency_id
        description: |
          If only a selection of `agency.agency_id` within the GTFS Dataset
          should be selected to represent a specific `services` record, they are
          listed here.  If all `agency_id` should be selected, this is blank.
          "Leftover" `agency_id` from other `agency_id` selections for the
          same `GTFS dataset` are indicated by `*`.
      - name: network_id
        description: |
          If only a selection of `routes.network_id` within the GTFS Dataset
          should be selected to represent a specific `services` record, they are
          listed here.  If all `network_id` should be selected, this is blank.
          "Leftover" `network_id` from other `network_id` selections for the
          same `GTFS dataset` are indicated by `*`.
      - name: route_id
        description: |
          If only a selection of `routes.route_id` within the GTFS Dataset
          should be selected to represent a specific `services` record, they are
          listed here.  If all `route_id` should be selected, this is blank.
          "Leftover" `route_id` from other `route_id` selections for the
          same `GTFS dataset` are indicated by `*`.
      - name: reference_static_gtfs_service_data_key
        description: |
          For realtime dataset / service relationships,
          the associated schedule dataset / service relationship.
      - name:  fares_v2_status
        # self relationship test breaks metabase connector: https://github.com/JarvusInnovations/dbt-metabase/blob/master/dbtmetabase/parsers/dbt_manifest.py#L202
        # TODO: make an aliased version of the relationship test
        # tests:
        #   - relationships:
        #      to: ref('dim_gtfs_service_data')
        #      field: key
  - name: dim_fare_systems
    description: '{{ doc("fare_systems_table") }}'
    columns:
      - *key
  - name: dim_service_components
    description: |
      Each row is a unique service / product / component combination.
    columns:
      - *key
  - name: bridge_components_x_products
    description: |
      Mapping table between components and products.
      Relationship indicates that product can act as that component.
      This is a many-to-many relationship.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - component_key
            - product_key
    columns:
      - name: component_key
        tests:
          - relationships:
             to: ref('dim_components')
             field: key
      - name: product_key
        tests:
          - relationships:
             to: ref('dim_products')
             field: key
  - name: dim_provider_gtfs_data
    description: |
      Each record links together an organization with a GTFS dataset,
      where the organization manages a service for which that GTFS dataset is "primary".
      Thus, each row represents a unique "primary" organization / service / gtfs_service_data /
      gtfs_dataset relationship. This table can be used to determine what
      GTFS dataset(s) represent a given provider's service(s); i.e., if
      trying to determine whether a given "agency" "has" GTFS, this table can
      be used to make that determination.

      Note that GTFS datasets whose service relationships are null or unknown
      will not be present here.
    columns:
      - *key
      - name: service_key
        tests:
          - relationships:
             to: ref('dim_services')
             field: key
      - name: gtfs_dataset_key
        tests:
          - relationships:
             to: ref('dim_gtfs_datasets')
             field: key
      - name: organization_key
        tests:
          - relationships:
              to: ref('dim_organizations')
              field: key
      - name: gtfs_service_data_key
        tests:
          - relationships:
             to: ref('dim_gtfs_service_data')
             field: key
  - name: bridge_components_x_properties_and_features
    description: |
      Mapping table between components and properties_and_features.
      Relationship indicates that component has specified property or feature.
      This is a many-to-many relationship.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - component_key
            - property_feature_key
    columns:
      - name: component_key
        tests:
          - relationships:
             to: ref('dim_components')
             field: key
      - name: property_feature_key
        tests:
          - relationships:
             to: ref('dim_properties_and_features')
             field: key
  - name: bridge_data_schemas_x_products_inputs
    description: |
      Mapping table between data schemas and products.
      Relationship indicates that data schema is an accepted input into
      given product.
      This is a many-to-many relationship.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - data_schema_key
            - product_key
    columns:
      - name: data_schema_key
        tests:
          - relationships:
             to: ref('dim_data_schemas')
             field: key
      - name: product_key
        tests:
          - relationships:
             to: ref('dim_products')
             field: key
  - name: bridge_data_schemas_x_products_outputs
    description: |
      Mapping table between data schemas and products.
      Relationship indicates that data schema can be produced as output
      of given product.
      This is a many-to-many relationship.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - data_schema_key
            - product_key
    columns:
      - name: data_schema_key
        tests:
          - relationships:
             to: ref('dim_data_schemas')
             field: key
      - name: product_key
        tests:
          - relationships:
             to: ref('dim_products')
             field: key
  - name: bridge_organizations_x_services_managed
    description: |
      Mapping table between organizations and services.
      Relationship indicates that organization manages (provides)
      the given mobility service.
      This is a many-to-many relationship.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - organization_key
            - service_key
    columns:
      - name: organization_key
        tests:
          - relationships:
             to: ref('dim_organizations')
             field: key
      - name: service_key
        tests:
          - relationships:
             to: ref('dim_services')
             field: key
  - name: bridge_parent_organizations
    description: |
      Mapping table between organizations and their parents
      (map between two organization records.)
      This is a many-to-many relationship.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - organization_key
            - parent_organization_key
    columns:
      - name: organization_key
        tests:
          - relationships:
             to: ref('dim_organizations')
             field: key
      - name: parent_organization_key
        tests:
          - relationships:
             to: ref('dim_organizations')
             field: key
  - name: bridge_paratransit_services
    description: |
      Mapping table between services and services for which
      they provide paratransit service
      (map between two service records.)
      This is a many-to-many relationship.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - service_key
            - paratransit_for_service_key
    columns:
      - name: service_key
        tests:
          - relationships:
             to: ref('dim_services')
             field: key
      - name: paratransit_for_service_key
        tests:
          - relationships:
             to: ref('dim_services')
             field: key
  - name: bridge_organizations_x_gtfs_datasets_produced
    description: |
      Mapping table between organizations and GTFS datasets
      producted by that organization.
      This is a many-to-many relationship.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - organization_key
            - gtfs_dataset_key
    columns:
      - name: organization_key
        tests:
          - relationships:
             to: ref('dim_organizations')
             field: key
      - name: gtfs_dataset_key
        tests:
          - relationships:
             to: ref('dim_gtfs_datasets')
             field: key
  - name: bridge_organizations_x_funding_programs
    description: |
      Mapping table between organizations and associated
      funding programs.
      This is a many-to-many relationship.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - organization_key
            - funding_program_key
    columns:
      - name: organization_key
        tests:
          - relationships:
             to: ref('dim_organizations')
             field: key
      - name: funding_program_key
        tests:
          - relationships:
             to: ref('dim_funding_programs')
             field: key
  - name: bridge_fare_systems_x_services
    description: |
      Mapping table between fare systems and services.
      Relationship indicates that service utilizes the given fare system.
      This is a many-to-many relationship.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - fare_system_key
            - service_key
    columns:
      - name: fare_system_key
        tests:
          - relationships:
             to: ref('dim_fare_systems')
             field: key
      - name: service_key
        tests:
          - relationships:
             to: ref('dim_services')
             field: key
