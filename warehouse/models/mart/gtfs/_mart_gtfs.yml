version: 2

models:
  - name: dim_schedule_feeds
    description: |
      Each row is a "feed", representing a unique zipfile version associated with the same GTFS dataset record
      that was successfully downloaded and has data in the warehouse.
      When data fails to download, we do not interpolate it unless an identical zipfile is subsequently
      downloaded. So for example, say we download zipfile A from URL X on January 1, then the download
      or unzip operation fails for any reason on January 2, and then we download zipfile A from URL X
      again on January 3. If you check this table on January 3 before the new data has appeared in the
      warehouse, it will show zipfile A has expired on January 2. But once the same zipfile is ingested
      again, if you check on January 4, we will show that zipfile A was continuously in effect
      January 1-3. The reason for this is that if a new zipfile version B were to be uploaded on January 3,
      we would want to correctly say that we don't know what was in effect on January 2.
      This table should be used to understand "versions" of constituent data like routes, trips, etc.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `base64_url` and `_valid_from`.
        tests: &primary_key_tests
          - unique
          - not_null
      - &base64_url
        name: base64_url
        description: |
          Base 64 encoded URL from which this data was scraped.
      - &_valid_from
        name: _valid_from
        description: '{{ doc("column_valid_from") }}'
      - &_valid_to
        name: _valid_to
        description: '{{ doc("column_valid_to") }}'
  - name: fct_daily_schedule_feeds
    description: |
      Each row is a unique date / feed pair, where the feed is the feed version that was in effect at
      noon Pacific Time on that date. This is intended to make it clear what feed version to use
      to analyze a given date.
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `date` and `feed_key`.
        tests: *primary_key_tests
      - name: date
        description: |
          Date on which the given feed was active at noon Pacific Time.
      - name: feed_key
        description: |
          Foreign key to the `dim_schedule_feeds` table.
      - &gtfs_dataset_key
        name: gtfs_dataset_key
        tests:
          - not_null
          - relationships:
              to: ref('dim_gtfs_datasets')
              field: key
              config:
                # there are a dozen rows of SMART transit which was deleted from Airtable
                # this will work without exception once the Airtable dim is historical;
                # this threshold may need to increase if the backfill occurs prior to that
                error_if: ">20"
      - name: is_future
        description: |
          Boolean indicating whether this date is in the future relative to the last time that the table
          was run. If this is a future date (if is_future is true), any coverage is prospective and
          subject to change.
  - name: fct_schedule_feed_downloads
    description: |
      Each row is an instance of a download attempt, uniquely identified by base64_url and
      timestamp.
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `base64_url` and `ts`.
        tests: *primary_key_tests
      - name: feed_key
        description: |
          Foreign key to the `dim_schedule_feeds` table.
        tests:
          - not_null:
              config:
                where: download_success AND unzip_success
          - relationships:
              to: ref('dim_schedule_feeds')
              field: key
      - *gtfs_dataset_key
      - name: ts
        description: |
          Timestamp at which this feed download attempt occurred.
      - *base64_url
      - name: download_success
        description: |
          Boolean indicating whether this download attempt was successful.
      - name: download_exception
        description: |
          If download attempt failed, lists the exception that was encountered.
      - name: unzip_success
        description: |
          Boolean indicating whether this unzip attempt was successful.
      - name: unzip_exception
        description: |
          If unzip attempt failed, lists the exception that was encountered.
      - name: zipfile_extract_md5hash
        description: '{{ doc("column_zipfile_md5_hash") }}'
      - name: zipfile_files
        description: '{{ doc("column_zipfile_files") }}'
      - name: zipfile_dirs
        description: '{{ doc("column_zipfile_dirs") }}'
  - name: fct_vehicle_locations
    description: |
      De-duped vehicle positions, removing redundant/duplicated positions
      in the underlying messages. Unique at the url/timestamp/vehicle/trip
      level.
    columns:
      - name: key
        description: |
          Synthetic primary key.
        tests:
          - unique:
              config:
                where: '__rt_sampled__'
          - not_null:
              config:
                where: '__rt_sampled__'
      - name: trip_id
        tests:
          - not_null:
              config:
                where: '__rt_sampled__'

  - name: fct_vehicle_positions_messages
    description: |
      Each row is a message received from a vehicle positions GTFS RT feed.
      See https://gtfs.org/realtime/reference/#message-vehicleposition for information
      about message structure.
      Due to data size, this table **must** be queried with a date filter (like `WHERE dt = 'YYYY-MM-DD'`).
      Hour filters will also further improve performance.
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `base64_url`, `extract_ts`,
          entity `id`, `vehicle_id`, and `trip_id`.
        tests:
          - unique:
              # TODO: make an RT test macro that does this date subtraction
              # test hour = 0 UTC because that's 5pm Pacific = PM peak, good sample of data
              where: '__rt_sampled__'
          - not_null:
              where: '__rt_sampled__'
      - name: gtfs_dataset_key
        description: |
          The primary key for the record in `dim_gtfs_datasets` associated with this message.
        columns:
          - <<: *gtfs_dataset_key
            config:
              where: '__rt_sampled__'
      - name: dt
        description: |
          Date on which we scraped this message.
          A date filter *must* be provided when querying this table, because of the size of the data.
      - name: hour
        description: |
          Timestamp of the beginning of the hour in which this message was scraped,
          ex. "2022-09-01T00:00:00+00".
      - name: base64_url
        description: |
          URL-safe base64 encoding of the URL from which this message was scraped.
      - name: _extract_ts
        description: |
          Time at which this message was scraped.
      - name: _name
        description: |
          String name of the GTFS dataset of which this message is a part.
          This field is provided for human readability and should not be used as a join key.
      - name: header_timestamp
        description: |
          See: https://gtfs.org/realtime/reference/#message-feedheader.
          Field has been converted to TIMESTAMP type for convenience.
      - name: header_incrementality
        description: |
          See: https://gtfs.org/realtime/reference/#message-feedheader.
      - name: header_version
        description: |
          See: https://gtfs.org/realtime/reference/#message-feedheader.
      - name: id
        description: |
          See: https://gtfs.org/realtime/reference/#message-feedentity.
      - name: current_stop_sequence
        description: |
          See: https://gtfs.org/realtime/reference/#message-vehicleposition.
      - name: stop_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-vehicleposition.
      - name: current_status
        description: |
          See: https://gtfs.org/realtime/reference/#message-vehicleposition.
      - name: vehicle_timestamp
        description: |
          See: https://gtfs.org/realtime/reference/#message-vehicleposition.
          Field has been converted to TIMESTAMP type for convenience.
      - name: congestion_level
        description: |
          See: https://gtfs.org/realtime/reference/#message-vehicleposition.
      - name: occupancy_status
        description: |
          See: https://gtfs.org/realtime/reference/#message-vehicleposition.
      - name: occupancy_percentage
        description: |
          See: https://gtfs.org/realtime/reference/#message-vehicleposition.
      - name: vehicle_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-vehicledescriptor.
      - name: vehicle_label
        description: |
          See: https://gtfs.org/realtime/reference/#message-vehicledescriptor.
      - name: vehicle_license_plate
        description: |
          See: https://gtfs.org/realtime/reference/#message-vehicledescriptor.
      - name: vehicle_wheelchair_accessible
        description: |
          See: https://gtfs.org/realtime/reference/#message-vehicledescriptor.
      - name: trip_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-tripdescriptor.
      - name: trip_route_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-tripdescriptor.
      - name: trip_direction_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-tripdescriptor.
      - name: trip_start_time
        description: |
          See: https://gtfs.org/realtime/reference/#message-tripdescriptor.
      - name: trip_start_date
        description: |
          See: https://gtfs.org/realtime/reference/#message-tripdescriptor.
      - name: trip_schedule_relationship
        description: |
          See: https://gtfs.org/realtime/reference/#message-tripdescriptor.
      - name: position_latitude
        description: |
          See: https://gtfs.org/realtime/reference/#message-position.
      - name: position_longitude
        description: |
          See: https://gtfs.org/realtime/reference/#message-position.
      - name: position_bearing
        description: |
          See: https://gtfs.org/realtime/reference/#message-position.
      - name: position_odometer
        description: |
          See: https://gtfs.org/realtime/reference/#message-position.
      - name: position_speed
        description: |
          See: https://gtfs.org/realtime/reference/#message-position.

  - name: dim_agency
    description: |
      Each row is a cleaned row from an agency.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#agencytxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, agency_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `agency_id`.
        tests: *primary_key_tests
      - &feed_key
        name: feed_key
        description: |
          Foreign key to the `dim_schedule_feeds` table.
        tests:
          - not_null
          - relationships:
              to: ref('dim_schedule_feeds')
              field: key
      - *base64_url
      - name: agency_id
        description: '{{ doc("gtfs_agency__agency_id") }}'
      - name: agency_name
        description: '{{ doc("gtfs_agency__agency_name") }}'
        tests: &not_null_warn_99_threshold
          - dbt_utils.not_null_proportion:
              at_least: 0.99
              severity: warn
      - name: agency_url
        description: '{{ doc("gtfs_agency__agency_url") }}'
        tests: *not_null_warn_99_threshold
      - name: agency_timezone
        description: '{{ doc("gtfs_agency__agency_timezone") }}'
        tests: &not_null_warn
        - not_null:
            config:
              severity: warn
      - name: agency_lang
        description: '{{ doc("gtfs_agency__agency_lang") }}'
      - name: agency_phone
        description: '{{ doc("gtfs_agency__agency_phone") }}'
      - name: agency_fare_url
        description: '{{ doc("gtfs_agency__agency_fare_url") }}'
      - name: agency_email
        description: '{{ doc("gtfs_agency__agency_email") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_areas
    description: |
      Each row is a cleaned row from an areas.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/schedule/reference/#areastxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, area_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `area_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: area_id
        description: '{{ doc("gtfs_areas__area_id") }}'
        tests: &not_null_error
        - not_null
      - name: area_name
        description: '{{ doc("gtfs_areas__area_name") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_attributions
    description: |
      Each row is a cleaned row from an attributions.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#attributionstxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, attribution_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `attribution_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: attribution_id
        description: '{{ doc("gtfs_attributions__attribution_id") }}'
      - name: agency_id
        description: '{{ doc("gtfs_attributions__agency_id") }}'
      - name: route_id
        description: '{{ doc("gtfs_attributions__route_id") }}'
      - name: trip_id
        description: '{{ doc("gtfs_attributions__trip_id") }}'
      - name: organization_name
        description: '{{ doc("gtfs_attributions__organization_name") }}'
        tests: *not_null_warn
      - name: is_producer
        description: '{{ doc("gtfs_attributions__is_producer") }}'
      - name: is_operator
        description: '{{ doc("gtfs_attributions__is_operator") }}'
      - name: is_authority
        description: '{{ doc("gtfs_attributions__is_authority") }}'
      - name: attribution_url
        description: '{{ doc("gtfs_attributions__attribution_url") }}'
      - name: attribution_email
        description: '{{ doc("gtfs_attributions__attribution_email") }}'
      - name: attribution_phone
        description: '{{ doc("gtfs_attributions__attribution_phone") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_fare_attributes
    description: |
      Each row is a cleaned row from a fare_attributes.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#fare_attributestxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, fare_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `fare_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: fare_id
        description: '{{ doc("gtfs_fare_attributes__fare_id") }}'
        tests: *not_null_error
      - name: price
        description: '{{ doc("gtfs_fare_attributes__price") }}'
        tests: *not_null_warn
      - name: currency_type
        description: '{{ doc("gtfs_fare_attributes__currency_type") }}'
        tests: *not_null_warn
      - name: payment_method
        description: '{{ doc("gtfs_fare_attributes__payment_method") }}'
        tests: *not_null_warn
      - name: transfers
        description: '{{ doc("gtfs_fare_attributes__transfers") }}'
        tests: *not_null_warn
      - name: agency_id
        description: '{{ doc("gtfs_fare_attributes__agency_id") }}'
      - name: transfer_duration
        description: '{{ doc("gtfs_fare_attributes__transfer_duration") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_fare_leg_rules
    description: |
      Each row is a cleaned row from a fare_leg_rules.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/schedule/reference/#fare_leg_rulestxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, network_id, from_area_id, to_area_id, fare_product_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key`, `network_id`, `from_area_id`, `to_area_id`, and `fare_product_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: leg_group_id
        description: '{{ doc("gtfs_fare_leg_rules__leg_group_id") }}'
      - name: network_id
        description: '{{ doc("gtfs_fare_leg_rules__network_id") }}'
      - name: from_area_id
        description: '{{ doc("gtfs_fare_leg_rules__from_area_id") }}'
      - name: to_area_id
        description: '{{ doc("gtfs_fare_leg_rules__to_area_id") }}'
      - name: fare_product_id
        description: '{{ doc("gtfs_fare_leg_rules__fare_product_id") }}'
        tests: *not_null_error
      - *_valid_from
      - *_valid_to
  - name: dim_fare_products
    description: |
      Each row is a cleaned row from a fare_products.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/schedule/reference/#fare_productstxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, fare_product_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `fare_product_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: fare_product_id
        description: '{{ doc("gtfs_fare_products__fare_product_id") }}'
        tests: *not_null_error
      - name: fare_product_name
        description: '{{ doc("gtfs_fare_products__fare_product_name") }}'
      - name: amount
        description: '{{ doc("gtfs_fare_products__amount") }}'
        tests: *not_null_warn_99_threshold
      - name: currency
        description: '{{ doc("gtfs_fare_products__currency") }}'
        tests: *not_null_warn_99_threshold
      - *_valid_from
      - *_valid_to
  - name: dim_fare_rules
    description: |
      Each row is a cleaned row from a fare_rules.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#fare_rulestxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, fare_id, route_id, origin_id, destination_id, contains_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key`, `fare_id`, `route_id`, `origin_id`, `destination_id`, and `contains_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: fare_id
        description: '{{ doc("gtfs_fare_rules__fare_id") }}'
        tests: *not_null_error
      - name: route_id
        description: '{{ doc("gtfs_fare_rules__route_id") }}'
      - name: origin_id
        description: '{{ doc("gtfs_fare_rules__origin_id") }}'
      - name: destination_id
        description: '{{ doc("gtfs_fare_rules__destination_id") }}'
      - name: contains_id
        description: '{{ doc("gtfs_fare_rules__contains_id") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_fare_transfer_rules
    description: |
      Each row is a cleaned row from a fare_transfer_rules.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/schedule/reference/#fare_transfer_rulestxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, from_leg_group_id, to_leg_group_id, fare_product_id, transfer_count, duration_limit
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key`, 'from_leg_group_id', 'to_leg_group_id', 'fare_product_id', 'transfer_count', and 'duration_limit'.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: from_leg_group_id
        description: '{{ doc("gtfs_fare_transfer_rules__from_leg_group_id") }}'
      - name: to_leg_group_id
        description: '{{ doc("gtfs_fare_transfer_rules__to_leg_group_id") }}'
      - name: transfer_count
        description: '{{ doc("gtfs_fare_transfer_rules__transfer_count") }}'
      - name: duration_limit
        description: '{{ doc("gtfs_fare_transfer_rules__duration_limit") }}'
      - name: duration_limit_type
        description: '{{ doc("gtfs_fare_transfer_rules__duration_limit_type") }}'
      - name: fare_transfer_type
        description: '{{ doc("gtfs_fare_transfer_rules__fare_transfer_type") }}'
        tests: *not_null_warn_99_threshold
      - name: fare_product_id
        description: '{{ doc("gtfs_fare_transfer_rules__fare_product_id") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_feed_info
    description: |
      Each row is a cleaned row from a feed_info.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#feed_infotxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, feed_publisher_name, feed_publisher_url, feed_lang, default_lang, feed_version, feed_contact_email, feed_contact_url, feed_start_date, feed_end_date
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key`, `feed_publisher_name`, `feed_publisher_url`, `feed_lang`, `default_lang`, `feed_version`, `feed_contact_email`, `feed_contact_url`, `feed_start_date`, and `feed_end_date`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: feed_publisher_name
        description: '{{ doc("gtfs_feed_info__feed_publisher_name") }}'
        tests: *not_null_warn
      - name: feed_publisher_url
        description: '{{ doc("gtfs_feed_info__feed_publisher_url") }}'
        tests: *not_null_warn_99_threshold
      - name: feed_lang
        description: '{{ doc("gtfs_feed_info__feed_lang") }}'
        tests: *not_null_warn_99_threshold
      - name: default_lang
        description: '{{ doc("gtfs_feed_info__default_lang") }}'
      - name: feed_start_date
        description: '{{ doc("gtfs_feed_info__feed_start_date") }}'
      - name: feed_end_date
        description: '{{ doc("gtfs_feed_info__feed_end_date") }}'
      - name: feed_version
        description: '{{ doc("gtfs_feed_info__feed_version") }}'
      - name: feed_contact_email
        description: '{{ doc("gtfs_feed_info__feed_contact_email") }}'
      - name: feed_contact_url
        description: '{{ doc("gtfs_feed_info__feed_contact_url") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_frequencies
    description: |
      Each row is a cleaned row from a frequencies.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#frequenciestxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, trip_id, start_time
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key`, `trip_id`, and `start_time`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: trip_id
        description: '{{ doc("gtfs_frequencies__trip_id") }}'
        tests: *not_null_error
      - name: start_time
        description: '{{ doc("gtfs_frequencies__start_time") }}'
        tests: *not_null_warn
      - name: end_time
        description: '{{ doc("gtfs_frequencies__end_time") }}'
        tests: *not_null_warn
      - name: headway_secs
        description: '{{ doc("gtfs_frequencies__headway_secs") }}'
        tests: *not_null_warn
      - name: exact_times
        description: '{{ doc("gtfs_frequencies__exact_times") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_levels
    description: |
      Each row is a cleaned row from a levels.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#levelstxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, level_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `level_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: level_id
        description: '{{ doc("gtfs_levels__level_id") }}'
        tests: *not_null_error
      - name: level_index
        description: '{{ doc("gtfs_levels__level_index") }}'
        tests: *not_null_warn
      - name: level_name
        description: '{{ doc("gtfs_levels__level_name") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_pathways
    description: |
      Each row is a cleaned row from a pathways.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#pathwaystxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, pathway_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `pathway_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: pathway_id
        description: '{{ doc("gtfs_pathways__pathway_id") }}'
        tests: *not_null_error
      - name: from_stop_id
        description: '{{ doc("gtfs_pathways__from_stop_id") }}'
        tests: *not_null_error
      - name: to_stop_id
        description: '{{ doc("gtfs_pathways__to_stop_id") }}'
        tests: *not_null_error
      - name: pathway_mode
        description: '{{ doc("gtfs_pathways__pathway_mode") }}'
        tests: *not_null_warn
      - name: is_bidirectional
        description: '{{ doc("gtfs_pathways__is_bidirectional") }}'
        tests: *not_null_warn
      - name: length
        description: '{{ doc("gtfs_pathways__length") }}'
      - name: traversal_time
        description: '{{ doc("gtfs_pathways__traversal_time") }}'
      - name: stair_count
        description: '{{ doc("gtfs_pathways__stair_count") }}'
      - name: max_slope
        description: '{{ doc("gtfs_pathways__max_slope") }}'
      - name: min_width
        description: '{{ doc("gtfs_pathways__min_width") }}'
      - name: signposted_as
        description: '{{ doc("gtfs_pathways__signposted_as") }}'
      - name: reversed_signposted_as
        description: '{{ doc("gtfs_pathways__reversed_signposted_as") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_routes
    description: |
      Each row is a cleaned row from a routes.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#routestxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, route_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `route_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: route_id
        description: '{{ doc("gtfs_routes__route_id") }}'
        tests: *not_null_error
      - name: agency_id
        description: '{{ doc("gtfs_routes__agency_id") }}'
      - name: route_short_name
        description: '{{ doc("gtfs_routes__route_short_name") }}'
      - name: route_long_name
        description: '{{ doc("gtfs_routes__route_long_name") }}'
      - name: route_desc
        description: '{{ doc("gtfs_routes__route_desc") }}'
      - name: route_type
        description: '{{ doc("gtfs_routes__route_type") }}'
        tests: *not_null_warn
      - name: route_url
        description: '{{ doc("gtfs_routes__route_url") }}'
      - name: route_color
        description: '{{ doc("gtfs_routes__route_color") }}'
      - name: route_text_color
        description: '{{ doc("gtfs_routes__route_text_color") }}'
      - name: route_sort_order
        description: '{{ doc("gtfs_routes__route_sort_order") }}'
      - name: continuous_pickup
        description: '{{ doc("gtfs_routes__continuous_pickup") }}'
      - name: continuous_drop_off
        description: '{{ doc("gtfs_routes__continuous_drop_off") }}'
      - name: network_id
        description: '{{ doc("gtfs_routes__network_id") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_shapes
    description: |
      Each row is a cleaned row from a shapes.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#shapestxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, shape_id, shape_pt_sequence
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key`, `shape_id`, and `shape_pt_sequence`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: shape_id
        description: '{{ doc("gtfs_shapes__shape_id") }}'
        tests: *not_null_error
      - name: shape_pt_lat
        description: '{{ doc("gtfs_shapes__shape_pt_lat") }}'
        tests: *not_null_warn
        meta:
          metabase.semantic_type: type/Latitude
          ckan.type: FLOAT
          ckan.length: 6
          ckan.precision: 3
      - name: shape_pt_lon
        description: '{{ doc("gtfs_shapes__shape_pt_lon") }}'
        tests: *not_null_warn
        meta:
          metabase.semantic_type: type/Longitude
          ckan.type: FLOAT
          ckan.length: 7
          ckan.precision: 3
      - name: shape_pt_sequence
        description: '{{ doc("gtfs_shapes__shape_pt_sequence") }}'
        tests: *not_null_warn
      - name: shape_dist_traveled
        description: '{{ doc("gtfs_shapes__shape_dist_traveled") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_stop_areas
    description: |
      Each row is a cleaned row from a stop_areas.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/schedule/reference/#stop_areastxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, area_id, stop_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key`, `area_id` and `stop_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: area_id
        description: '{{ doc("gtfs_stop_areas__area_id") }}'
        tests: *not_null_error
      - name: stop_id
        description: '{{ doc("gtfs_stop_areas__stop_id") }}'
        tests: *not_null_error
      - *_valid_from
      - *_valid_to
  - name: dim_stops
    description: |
      Each row is a cleaned row from a stops.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#stopstxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, stop_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `stop_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: stop_id
        description: '{{ doc("gtfs_stops__stop_id") }}'
        tests: &not_null_error_99_threshold
          - dbt_utils.not_null_proportion:
              at_least: 0.99
      - name: stop_code
        description: '{{ doc("gtfs_stops__stop_code") }}'
      - name: stop_name
        description: '{{ doc("gtfs_stops__stop_name") }}'
      - name: tts_stop_name
        description: '{{ doc("gtfs_stops__tts_stop_name") }}'
      - name: stop_desc
        description: '{{ doc("gtfs_stops__stop_desc") }}'
      - name: stop_lat
        description: '{{ doc("gtfs_stops__stop_lat") }}'
        meta:
          metabase.semantic_type: type/Latitude
          ckan.type: FLOAT
          ckan.length: 6
          ckan.precision: 3
      - name: stop_lon
        description: '{{ doc("gtfs_stops__stop_lon") }}'
        meta:
          metabase.semantic_type: type/Longitude
          ckan.type: FLOAT
          ckan.length: 7
          ckan.precision: 3
      - name: zone_id
        description: '{{ doc("gtfs_stops__zone_id") }}'
      - name: stop_url
        description: '{{ doc("gtfs_stops__stop_url") }}'
      - name: location_type
        description: '{{ doc("gtfs_stops__location_type") }}'
      - name: parent_station
        description: '{{ doc("gtfs_stops__parent_station") }}'
      - name: stop_timezone
        description: '{{ doc("gtfs_stops__stop_timezone") }}'
      - name: wheelchair_boarding
        description: '{{ doc("gtfs_stops__wheelchair_boarding") }}'
      - name: level_id
        description: '{{ doc("gtfs_stops__level_id") }}'
      - name: platform_code
        description: '{{ doc("gtfs_stops__platform_code") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_transfers
    description: |
      Each row is a cleaned row from a transfers.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#transferstxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, from_stop_id, to_stop_id, from_trip_id, to_trip_id, from_route_id, to_route_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key`, `from_stop_id`, `to_stop_id`, `from_trip_id`, `to_trip_id`, `from_route_id`, and `to_route_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: from_stop_id
        description: '{{ doc("gtfs_transfers__from_stop_id") }}'
        tests: *not_null_error
      - name: to_stop_id
        description: '{{ doc("gtfs_transfers__to_stop_id") }}'
        tests: *not_null_error
      - name: transfer_type
        description: '{{ doc("gtfs_transfers__transfer_type") }}'
        tests: *not_null_warn
      - name: min_transfer_time
        description: '{{ doc("gtfs_transfers__min_transfer_time") }}'
      - name: from_route_id
      - name: to_route_id
      - name: from_trip_id
      - name: to_trip_id
      - *_valid_from
      - *_valid_to
  - name: dim_translations
    description: |
      Each row is a cleaned row from a translations.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#translationstxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, table_name, field_name, language, record_id, record_sub_id, field_value
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key`, `table_name`, `field_name`, `language`, `record_id`, `record_sub_id`, and `field_value`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: table_name
        description: '{{ doc("gtfs_translations__table_name") }}'
        tests: *not_null_warn
      - name: field_name
        description: '{{ doc("gtfs_translations__field_name") }}'
        tests: *not_null_warn
      - name: language
        description: '{{ doc("gtfs_translations__language") }}'
        tests: *not_null_warn
      - name: translation
        description: '{{ doc("gtfs_translations__translation") }}'
        tests: *not_null_warn
      - name: record_id
        description: '{{ doc("gtfs_translations__record_id") }}'
      - name: record_sub_id
        description: '{{ doc("gtfs_translations__record_sub_id") }}'
      - name: field_value
        description: '{{ doc("gtfs_translations__field_value") }}'
      - *_valid_from
      - *_valid_to
  - name: dim_trips
    description: |
      Each row is a cleaned row from a trips.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#tripstxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, trip_id
          where: "not warning_duplicate_primary_key"
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `trip_id`.
        tests: &pk_tests_with_dups
          - unique:
              where: "not warning_duplicate_primary_key"
          - not_null
      - *feed_key
      - *base64_url
      - name: route_id
        description: '{{ doc("gtfs_trips__route_id") }}'
        tests: *not_null_error
      - name: service_id
        description: '{{ doc("gtfs_trips__service_id") }}'
        tests: *not_null_error
      - name: trip_id
        description: '{{ doc("gtfs_trips__trip_id") }}'
        tests: *not_null_error
      - name: trip_headsign
        description: '{{ doc("gtfs_trips__trip_headsign") }}'
      - name: trip_short_name
        description: '{{ doc("gtfs_trips__trip_short_name") }}'
      - name: direction_id
        description: '{{ doc("gtfs_trips__direction_id") }}'
      - name: block_id
        description: '{{ doc("gtfs_trips__block_id") }}'
      - name: shape_id
        description: '{{ doc("gtfs_trips__shape_id") }}'
      - name: wheelchair_accessible
        description: '{{ doc("gtfs_trips__wheelchair_accessible") }}'
      - name: bikes_allowed
        description: '{{ doc("gtfs_trips__bikes_allowed") }}'
      - *_valid_from
      - *_valid_to
      - name: warning_duplicate_primary_key
        description: |
          Rows with `true` in this column have a duplicate primary key; i.e., `trip_id` is duplicated within an individual feed
          instance and `key` will also be duplicated as a result. Treat these rows with caution. They will cause fanout in joins.
  - name: dim_calendar
    description: |
      Each row is a cleaned row from a calendar.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#calendartxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, service_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `service_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: service_id
        description: '{{ doc("gtfs_calendar__service_id") }}'
        tests: *not_null_error
      - name: monday
        description: '{{ doc("gtfs_calendar__monday") }}'
        tests: *not_null_warn
      - name: tuesday
        description: '{{ doc("gtfs_calendar__tuesday") }}'
        tests: *not_null_warn
      - name: wednesday
        description: '{{ doc("gtfs_calendar__wednesday") }}'
        tests: *not_null_warn
      - name: thursday
        description: '{{ doc("gtfs_calendar__thursday") }}'
        tests: *not_null_warn
      - name: friday
        description: '{{ doc("gtfs_calendar__friday") }}'
        tests: *not_null_warn
      - name: saturday
        description: '{{ doc("gtfs_calendar__saturday") }}'
        tests: *not_null_warn
      - name: sunday
        description: '{{ doc("gtfs_calendar__sunday") }}'
        tests: *not_null_warn
      - name: start_date
        description: '{{ doc("gtfs_calendar__start_date") }}'
        tests: *not_null_warn
      - name: end_date
        description: '{{ doc("gtfs_calendar__end_date") }}'
        tests: *not_null_warn
  - name: dim_calendar_dates
    description: |
      Each row is a cleaned row from a calendar_dates.txt file.
      Definitions for the original GTFS fields are available at:
      https://gtfs.org/reference/static#calendar_datestxt.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, service_id, date
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key`, `service_id`, and `date`.
        tests: *primary_key_tests

      - *feed_key
      - *base64_url
      - name: service_id
        description: '{{ doc("gtfs_calendar_dates__service_id") }}'
        tests: *not_null_error
      - name: date
        description: '{{ doc("gtfs_calendar_dates__date") }}'
        tests: *not_null_warn
      - name: exception_type
        description: '{{ doc("gtfs_calendar_dates__exception_type") }}'
        tests: *not_null_warn
  - name: dim_stop_times
    description: |
      Cleaned GTFS schedule stop_times data.
      See https://gtfs.org/schedule/reference/#calendar_datestxt for specification.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, trip_id, stop_sequence
          where: "not warning_duplicate_primary_key"
          gaps: required
    columns:
      - name: base64_url
      - *feed_key
      - name: ts
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key`, `trip_id`, and `stop_sequence`.
        tests: *pk_tests_with_dups
      - name: trip_id
        description: '{{ doc("gtfs_stop_times__trip_id") }}'
        tests: *not_null_error
      - name: arrival_time
        description: '{{ doc("gtfs_stop_times__arrival_time") }}'
      - name: departure_time
        description: '{{ doc("gtfs_stop_times__departure_time") }}'
      - name: stop_id
        description: '{{ doc("gtfs_stop_times__stop_id") }}'
        tests:
        - not_null:
            where: "not warning_missing_foreign_key_stop_id"
      - name: stop_sequence
        description: '{{ doc("gtfs_stop_times__stop_sequence") }}'
        tests: *not_null_warn
      - name: stop_headsign
        description: '{{ doc("gtfs_stop_times__stop_headsign") }}'
      - name: pickup_type
        description: '{{ doc("gtfs_stop_times__pickup_type") }}'
      - name: drop_off_type
        description: '{{ doc("gtfs_stop_times__drop_off_type") }}'
      - name: continuous_pickup
        description: '{{ doc("gtfs_stop_times__continuous_pickup") }}'
      - name: continuous_drop_off
        description: '{{ doc("gtfs_stop_times__continuous_drop_off") }}'
      - name: shape_dist_traveled
        description: '{{ doc("gtfs_stop_times__shape_dist_traveled") }}'
      - name: timepoint
        description: '{{ doc("gtfs_stop_times__timepoint") }}'
      - name: warning_duplicate_primary_key
        description: |
          Rows with `true` in this column have a duplicate primary key; i.e., the given `trip_id`
          / `stop_sequence` pair is duplicated within an individual feed instance and `key` will
          also be duplicated as a result. Treat these rows with caution. They will cause fanout in joins.
      - name: warning_missing_foreign_key_stop_id
        description: |
          Rows with `true` in this column are missing the required `stop_id` value.
          This means they will fail to join with `stop` related information.
      - name: arrival_sec
        description: |
          This is a calculated field that does not come from GTFS - it is not a timestamp and can't be treated as such.

          Represents `arrival_time` as a total number of seconds after midnight of the first day of the given trip.
          For example, `arrival_time = 21:30:45` would lead to `arrival_sec = 21 * 3,600 + 30 * 60 + 45 * 1 = 77,445`.
          This allows us to perform duration calculations and handle timestamps that wrap past midnight like
          `25:40:00`, which are allowed in GTFS.
      - name: departure_sec
        description: |
          This is a calculated field that does not come from GTFS - it is not a timestamp and can't be treated as such.

          Represents `departure_time` as a total number of seconds after midnight of the first day of the given trip.
          For example, `departure_time = 21:30:45` would lead to `departure_sec = 21 * 3,600 + 30 * 60 + 45 * 1 = 77,445`.
          This allows us to perform duration calculations and handle timestamps that wrap past midnight like
          `25:40:00`, which are allowed in GTFS.
    meta:
      publish.gis_coordinate_system_epsg: WGS84
  - name: fct_daily_scheduled_trips
    description: |
      A daily table showing all trips that were scheduled on a given date.
      If a `service_date`, `trip_key` pair is present in this table,
      it means that that `trip_key` was scheduled to occur on that `service_date`.
      Specifically, it means that the associated `service_id` was active and had service
      scheduled. Dates where a `service_id` was active but not scheduled (for example,
      weekend dates within a weekday service's effective dates) are not listed in this table.
    columns:
      - name: key
        tests:
          - unique:
              where: "not contains_warning_duplicate_trip_primary_key"
          - not_null
      - name: feed_key
        description: Foreign key to dim_schedule_feeds.
        tests:
          - not_null
          - relationships:
              to: ref('dim_schedule_feeds')
              field: key
      - name: service_date
        description: Date on which this trip was active.
      - name: service_id
        description: |
          Service ID from calendar or calendar_dates that determines that this trip
          has service on this date.
      - name: trip_key
        description: Foreign key to dim_trips.
        tests:
          - relationships:
              to: ref('dim_trips')
              field: key
      - name: trip_id
      - name: route_key
        description: Foreign key to dim_routes.
        tests:
          - relationships:
              to: ref('dim_routes')
              field: key
      - name: route_id
      - name: shape_array_key
        description: Foreign key to dim_shapes_arrays.
        tests:
          - relationships:
              to: ref('dim_shapes_arrays')
              field: key
      - name: gtfs_dataset_key
      - name: contains_warning_duplicate_trip_primary_key
        description: |
          Rows with `true` in this column have a duplicate primary key in dim_trips;
          i.e., `trip_id` is duplicated within an individual feed instance.
          Treat these rows with caution.
      - name: n_stops
        description: |
          A distinct count of stop_id by trip
          Because this represents distinct stop_id values, it is not appropriate to sum across different trips.
      - name: n_stop_times
        description: |
          A count of stop events by trip
      - name: trip_first_departure_sec
        description: |
          A trip's earliest departure, calculated in seconds of the day
      - name: trip_last_arrival_sec
        description: |
          A trip's last arrival, calculated in seconds of the day
      - name: service_hours
        description: |
          A trip's total hours of service, calculated by subtracting `trip_last_arrival_sec` from
          `trip_first_departure_sec` and converting to hours
      - name: contains_warning_duplicate_stop_times_primary_key
        description: |
          Rows with `true` in this column indicate that the columns in this table that are aggregated from
          stop times data (`n_stops`, `n_stop_times`,  `trip_first_departure_sec`, `trip_last_arrival_sec`,
          and `service_hours`) contain at least one row that had a duplicate primary key in the source stop times data.

          I.e., at least one row being aggregated had a `trip_id` / `stop_sequence` pair that was not unique
          in the input data. This indicates that data quality issues were present in the stop times data
          that is being summarized here, and counts may be inflated due to multiple rows with identical identifiers.
      - name: contains_warning_missing_foreign_key_stop_id
        description: |
          Rows with `true` in this column indicate that the columns in this table that are aggregated from
          stop times data (`n_stops`, `n_stop_times`,  `trip_first_departure_sec`, `trip_last_arrival_sec`,
          and `service_hours`) contain at least one row that had a missing `stop_id` foreign key in the source stops data.

          I.e., at least one row being aggregated had a `stop_id` foreign key that was missing
          in the input data. This indicates that data quality issues were present in the stop times data
          that is being summarized here, and the count of distinct `stop_id`s at the trip level may be incorrect.
  - name: fct_daily_rt_feed_files
    description: |
      Each row is a date / URL pair with a summary of data aggregation outcomes.
    columns:
    - name: key
      tests: *primary_key_tests
    - name: date
      description: Date that data was downloaded.
    - *base64_url
    - &feed_type
      name: feed_type
      description: |
        One of `service_alerts`, `vehicle_positions`, and `trip_updates`.
    - name: parse_success_file_count
      description: Count of files successfully parsed. Target is 4,320 (one file every 20 seconds.)
      tests:
        - not_null
    - name: parse_failure_file_count
      description: Count of files where parsing failed, but a file was present.
      tests:
        - not_null
    - *gtfs_dataset_key
    - name: schedule_to_use_for_rt_validation_gtfs_dataset_key
      description: |
        Foreign key for the GTFS dataset record of the GTFS schedule dataset that
        should be used to validate this realtime dataset.
      tests:
          - relationships:
              to: ref('dim_gtfs_datasets')
              field: key
    - name: schedule_feed_key
      description: |
        Foreign key for the GTFS schedule feed version for this date / RT feed pair.
      tests:
          - relationships:
              to: ref('dim_schedule_feeds')
              field: key
  - name: dim_shapes_arrays
    description: |
      Each row is a shape, constructed from the points listed in
      `dim_shapes`, with the shape geometry described as an ordered
      array of points in the `pt_array` column.
      We cannot construct a LineString because of BigQuery limitations;
      see: https://gis.stackexchange.com/questions/426188/can-i-represent-a-route-that-doubles-back-on-itself-in-bigquery-with-a-linestrin.
    tests:
      - dbt_utils.mutually_exclusive_ranges:
          lower_bound_column: _valid_from
          upper_bound_column: _valid_to
          partition_by: base64_url, shape_id
          gaps: required
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `feed_key` and `shape_id`.
        tests: *primary_key_tests
      - *feed_key
      - *base64_url
      - name: shape_id
        description: '{{ doc("gtfs_shapes__shape_id") }}'
        tests: *not_null_error
      - name: pt_array
        description: Ordered array of WKT points that describe this shape.
        tests: *not_null_error
      - *_valid_from
      - *_valid_to
  - name: fct_daily_scheduled_service_summary
    description: |
      This is daily service totals by feed.
    tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - service_date
            - feed_key
      - dbt_utils.expression_is_true:
          expression: "ttl_service_hours >= 0"
    columns:
      - name: service_date
        description: Date on which this service level was present
        tests: *not_null_error
      - name: feed_key
        tests: *not_null_error
        description: feed_key only present with active service on date
      - name: ttl_service_hours
        description: Total service hours across entire feed on date
      - name: n_trips
        description: Total number of trips ran on date, if any
      - name: first_departure_sec
        description: Time of first departure on date
      - name: last_arrival_sec
        description: Time of last departure on date
      - name: n_stop_times
        description: |
          Total number of stop events observed
      - name: n_routes
        description: |
          Total number of routes that had trips scheduled on this day
      - name: contains_warning_duplicate_stop_times_primary_key
        description: |
          Rows with `true` in this column indicate that the columns in this table that are aggregated from
          stop times data (`n_stops`, `n_stop_times`,  `trip_first_departure_sec`, `trip_last_arrival_sec`,
          and `service_hours`) contain at least one row that had a duplicate primary key in the source stop times data.

          I.e., at least one row being aggregated had a `trip_id` / `stop_sequence` pair that was not unique
          in the input data. This indicates that data quality issues were present in the stop times data
          that is being summarized here, and counts may be inflated due to multiple rows with identical identifiers.
      - name: contains_warning_duplicate_trip_primary_key
        description: |
          Rows with `true` in this column indicate that `dim_trips` contains duplicates of this trip primary key.

          i.e., `trip_id` is duplicated within an individual feed instance.
      - name: contains_warning_missing_foreign_key_stop_id
        description: |
          Rows with `true` in this column indicate that the columns in this table that are aggregated from
          stop times data (`n_stops`, `n_stop_times`,  `trip_first_departure_sec`, `trip_last_arrival_sec`,
          and `service_hours`) contain at least one row that had a missing `stop_id` foreign key in the source stops data.

          I.e., at least one row being aggregated had a `stop_id` foreign key that was missing
          in the input data. This indicates that data quality issues were present in the stop times data
          that is being summarized here.
  - name: fct_hourly_rt_feed_files
    description: |
      An hourly count of the files that were downloaded each day per feed.
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `dt` and `base64_url`.
        tests: *primary_key_tests
      - name: dt
        description: |
          Date on which the download attempt was made.
      - *base64_url
      - *feed_type
      - name: file_count_day
        description: |
          The total number of files downloaded on on this day for this URL
      - name: hr_0
        description: |
          Count of files downloaded for this URL in the 0 hour UTC
      - name: hr_1
      - name: hr_2
      - name: hr_3
      - name: hr_4
      - name: hr_5
      - name: hr_6
      - name: hr_7
      - name: hr_8
      - name: hr_9
      - name: hr_10
      - name: hr_11
      - name: hr_12
      - name: hr_13
      - name: hr_14
      - name: hr_15
      - name: hr_16
      - name: hr_17
      - name: hr_18
      - name: hr_19
      - name: hr_20
      - name: hr_21
      - name: hr_22
      - name: hr_23
      - name: gtfs_dataset_key
        description: |
          The primary key for the record in `dim_gtfs_datasets` associated with this feed.
  - name: fct_hourly_rt_feed_files_success
    description: |
      The proportion of downloaded files that were successfully parsed as GTFS-RT.
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `dt` and `base64_url`.
        tests: *primary_key_tests
      - name: dt
        description: |
          Date on which the download attempt was made.
      - *base64_url
      - *feed_type
      - name: prop_success_file_count_day
        description: |
          The proportion of files successfully downloaded on this day for this URL
      - name: hr_0
        description: |
          The proportion of files successfully downloaded for this URL in the 0 hour UTC
      - name: hr_1
      - name: hr_2
      - name: hr_3
      - name: hr_4
      - name: hr_5
      - name: hr_6
      - name: hr_7
      - name: hr_8
      - name: hr_9
      - name: hr_10
      - name: hr_11
      - name: hr_12
      - name: hr_13
      - name: hr_14
      - name: hr_15
      - name: hr_16
      - name: hr_17
      - name: hr_18
      - name: hr_19
      - name: hr_20
      - name: hr_21
      - name: hr_22
      - name: hr_23
      - name: gtfs_dataset_key
        description: |
          The primary key for the record in `dim_gtfs_datasets` associated with this feed.
  - name: fct_service_alerts_messages
    description: |
      Each row is a message received from a service alerts GTFS RT feed.
      See https://gtfs.org/realtime/reference/#message-alert for information
      about message structure.
      Due to data size, this table **must** be queried with a date filter (like `WHERE dt = 'YYYY-MM-DD'`).
      Hour filters will also further improve performance.
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `base64_url`, `extract_ts`,
          entity `id`.
        tests: &rt_primary_key_tests
          - unique:
              where: '__rt_sampled__'
          - not_null:
              where: '__rt_sampled__'
      - name: gtfs_dataset_key
        description: |
          The primary key for the record in `dim_gtfs_datasets` associated with this message.
        columns:
          - <<: *gtfs_dataset_key
            config:
              where: '__rt_sampled__'
      - name: dt
        description: |
          Date on which we scraped this message.
          A date filter *must* be provided when querying this table, because of the size of the data.
      - name: hour
        description: |
          Timestamp of the beginning of the hour in which this message was scraped,
          ex. "2022-09-01T00:00:00+00".
      - name: base64_url
        description: |
          URL-safe base64 encoding of the URL from which this message was scraped.
      - name: _extract_ts
        description: |
          Time at which this message was scraped.
      - name: _name
        description: |
          String name of the GTFS dataset of which this message is a part.
          This field is provided for human readability and should not be used as a join key.
      - name: header_timestamp
        description: |
          See: https://gtfs.org/realtime/reference/#message-feedheader.
          Field has been converted to TIMESTAMP type for convenience.
      - name: header_incrementality
        description: |
          See: https://gtfs.org/realtime/reference/#message-feedheader.
      - name: header_version
        description: |
          See: https://gtfs.org/realtime/reference/#message-feedheader.
      - name: id
        description: |
          See: https://gtfs.org/realtime/reference/#message-feedentity.
      - name: active_period
        description: |
          See: https://gtfs.org/realtime/reference/#message-alert.
      - name: informed_entity
        description: |
          See: https://gtfs.org/realtime/reference/#message-alert.
      - name: cause
        description: |
          See: https://gtfs.org/realtime/reference/#message-alert.
      - name: effect
        description: |
          See: https://gtfs.org/realtime/reference/#message-alert.
      - name: url
        description: |
          See: https://gtfs.org/realtime/reference/#message-alert.
      - name: header_text
        description: |
          See: https://gtfs.org/realtime/reference/#message-alert.
      - name: description_text
        description: |
          See: https://gtfs.org/realtime/reference/#message-alert.
      - name: tts_header_text
        description: |
          See: https://gtfs.org/realtime/reference/#message-alert.
      - name: tts_description_text
        description: |
          See: https://gtfs.org/realtime/reference/#message-alert.
      - name: severity_level
        description: |
          See: https://gtfs.org/realtime/reference/#message-alert.
  - name: fct_service_alert_active_periods
    description: |
      Each row is an active period for a service alerts message.
      See https://gtfs.org/realtime/reference/#message-alert for information
      about message structure.
      Due to data size, this table **must** be queried with a date filter (like `WHERE dt = 'YYYY-MM-DD'`).
      Hour filters will also further improve performance.
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `service_alerts_message_key`,
          `active_period_start`, and `active_period_end`.
        tests: *rt_primary_key_tests
      - &service_alert_message_key
        name: service_alert_message_key
        description: |
          The primary key for the record in `dim_gtfs_datasets` associated with this message.
        tests:
          - not_null:
              config:
                where: '__rt_sampled__'
          # todo: figure out how to get this to work; it's erroring on the partition elimination
          # - dbt_utils.relationships_where:
          #     to: ref('fct_service_alerts_messages')
          #     field: key
          #     config:
          #       to_condition: dt >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)
          #       from_condition: dt >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)
      - name: dt
      - name: active_period_start
        description: |
          See: https://gtfs.org/realtime/reference/#message-timerange.
      - name: active_period_end
        description: |
          See: https://gtfs.org/realtime/reference/#message-timerange.
  - name: fct_service_alert_informed_entities
    description: |
      Each row is an informed entity for a service alerts message.
      See https://gtfs.org/realtime/reference/#message-alert for information
      about message structure.
      Due to data size, this table **must** be queried with a date filter (like `WHERE dt = 'YYYY-MM-DD'`).
      Hour filters will also further improve performance.
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `service_alerts_message_key`,
          `agency_id`, `trip_id`, `route_id`, and `stop_id`.
        tests: *rt_primary_key_tests
      - *service_alert_message_key
      - name: dt
      - name: agency_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-entityselector.
      - name: route_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-entityselector.
      - name: route_type
        description: |
          See: https://gtfs.org/realtime/reference/#message-entityselector.
      - name: direction_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-entityselector.
      - name: trip_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-entityselector.
      - name: route_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-tripdescriptor.
      - name: trip_direction_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-tripdescriptor.
      - name: trip_start_time
        description: |
          See: https://gtfs.org/realtime/reference/#message-tripdescriptor.
      - name: trip_start_date
        description: |
          See: https://gtfs.org/realtime/reference/#message-tripdescriptor.
      - name: trip_schedule_relationship
        description: |
          See: https://gtfs.org/realtime/reference/#message-tripdescriptor.
      - name: stop_id
        description: |
          See: https://gtfs.org/realtime/reference/#message-entityselector.
  - name: fct_service_alert_translations
    description: |
      Each row is a translation for a service alerts message in a given language.
      See https://gtfs.org/realtime/reference/#message-alert for information
      about message structure.
      Due to data size, this table **must** be queried with a date filter (like `WHERE dt = 'YYYY-MM-DD'`).
      Hour filters will also further improve performance.
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `service_alerts_message_key`,
          `header_text_text`, and `header_text_language`.
        tests: *rt_primary_key_tests
      - *service_alert_message_key
      - name: dt
      - name: url_text
        description: |
          See: https://gtfs.org/realtime/reference/#message-translation.
      - name: url_language
        description: |
          See: https://gtfs.org/realtime/reference/#message-translation.
      - name: header_text_text
        description: |
          See: https://gtfs.org/realtime/reference/#message-translation.
      - name: header_text_language
        description: |
          See: https://gtfs.org/realtime/reference/#message-translation.
      - name: description_text_text
        description: |
          See: https://gtfs.org/realtime/reference/#message-translation.
      - name: description_text_language
        description: |
          See: https://gtfs.org/realtime/reference/#message-translation.
      - name: tts_header_text_text
        description: |
          See: https://gtfs.org/realtime/reference/#message-translation.
      - name: tts_header_text_language
        description: |
          See: https://gtfs.org/realtime/reference/#message-translation.
      - name: tts_description_text_text
        description: |
          See: https://gtfs.org/realtime/reference/#message-translation.
      - name: tts_description_text_language
        description: |
          See: https://gtfs.org/realtime/reference/#message-translation.
      - name: english_likelihood
        description: |
          100 if English language, 1 if null (null can mean no internationalization),
          0 for other languages.
  - name: fct_daily_service_alerts
    description: |
      Each row is a daily summary of a service alert.
      See https://gtfs.org/realtime/reference/#message-alert for information
      about message structure.
    columns:
      - name: key
        description: |
          Synthetic primary key constructed from `dt`,
          `base64_url`, and entity `id`.
        tests:
          - unique:
              where: dt >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)
          - not_null:
              where: dt >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)
      - name: first_header_timestamp
        description: |
          Earliest header timestamp at which this alert appeared on this date.
      - name: last_header_timestamp
        description: |
          Latest header timestamp at which this alert appeared on this date.
      - name: num_appearances
        description: |
          Number of times that this alert appeared on this date.
