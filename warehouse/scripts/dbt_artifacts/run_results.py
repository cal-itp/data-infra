# generated by datamodel-codegen:
#   filename:  https://schemas.getdbt.com/dbt/run-results/v4.json
#   timestamp: 2023-05-02T16:20:20+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field


class BaseArtifactMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    dbt_schema_version: str
    dbt_version: Optional[str] = "1.0.0b2"
    generated_at: Optional[datetime] = "2021-11-02T20:18:06.799863Z"
    invocation_id: Optional[str] = None
    env: Optional[Dict[str, str]] = {}


class StatusEnum(Enum):
    success = "success"
    error = "error"
    skipped = "skipped"


class StatusEnum1(Enum):
    pass_ = "pass"
    error = "error"
    fail = "fail"
    warn = "warn"
    skipped = "skipped"


class StatusEnum2(Enum):
    pass_ = "pass"
    warn = "warn"
    error = "error"
    runtime_error = "runtime error"


class TimingInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None


class FreshnessMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    dbt_schema_version: Optional[str] = "https://schemas.getdbt.com/dbt/sources/v3.json"
    dbt_version: Optional[str] = "1.0.0b2"
    generated_at: Optional[datetime] = "2021-11-02T20:18:06.796684Z"
    invocation_id: Optional[str] = None
    env: Optional[Dict[str, str]] = {}


class Status(Enum):
    runtime_error = "runtime error"


class SourceFreshnessRuntimeError(BaseModel):
    class Config:
        extra = Extra.forbid

    unique_id: str
    error: Optional[Union[str, int]] = None
    status: Status


class Status1(Enum):
    pass_ = "pass"
    warn = "warn"
    error = "error"
    runtime_error = "runtime error"


class PeriodEnum(Enum):
    minute = "minute"
    hour = "hour"
    day = "day"


class Time(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = None
    period: Optional[PeriodEnum] = None


class RunResultOutput(BaseModel):
    class Config:
        extra = Extra.forbid

    status: Union[StatusEnum, StatusEnum1, StatusEnum2]
    timing: List[TimingInfo]
    thread_id: str
    execution_time: float
    adapter_response: Dict[str, Any]
    message: Optional[str] = None
    failures: Optional[int] = None
    unique_id: str


class FreshnessThreshold(BaseModel):
    class Config:
        extra = Extra.forbid

    warn_after: Optional[Time] = Field(
        default_factory=lambda: Time.parse_obj({"count": None, "period": None})
    )
    error_after: Optional[Time] = Field(
        default_factory=lambda: Time.parse_obj({"count": None, "period": None})
    )
    filter: Optional[str] = None


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    metadata: BaseArtifactMetadata
    results: List[RunResultOutput]
    elapsed_time: float
    args: Optional[Dict[str, Any]] = {}


class SourceFreshnessOutput(BaseModel):
    class Config:
        extra = Extra.forbid

    unique_id: str
    max_loaded_at: datetime
    snapshotted_at: datetime
    max_loaded_at_time_ago_in_s: float
    status: Status1
    criteria: FreshnessThreshold
    adapter_response: Dict[str, Any]
    timing: List[TimingInfo]
    thread_id: str
    execution_time: float
